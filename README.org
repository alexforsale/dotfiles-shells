#+TITLE: Readme

* .shrc
  :PROPERTIES:
  :header-args: :tangle .shrc :shebang #!/bin/sh
  :END:
** header
   #+begin_src sh
     # $FreeBSD$
     #
     # .shrc - bourne shell startup file
     #
     # This file will be used if the shell is invoked for interactive use and
     # the environment variable ENV is set to this file.
     #
     # see also sh(1), environ(7).
     #
   #+end_src
** umask
   #+begin_src sh
     # file permissions: rwxr-xr-x
     #
     # umask	022
   #+end_src
** vi-mode shell
   #+begin_src sh
     # Uncomment this to enable the builtin vi(1) command line editor in sh(1),
     # e.g. ESC to go into visual mode.
     # set -o vi
   #+end_src
** some useful aliases
   #+begin_src sh
     alias h='fc -l'
     alias j=jobs
     alias m="$PAGER"
     alias ll='ls -laFo'
     alias l='ls -l'
     alias g='egrep -i'
   #+end_src
** be paranoid
   #+begin_src sh
     # # be paranoid
     # alias cp='cp -ip'
     # alias mv='mv -i'
     # alias rm='rm -i'
   #+end_src
** prompt
   #+begin_src sh
     # set prompt: ``username@hostname:directory $ ''
     PS1="\u@\h:\w \\$ "
   #+end_src
** cd path
   #+begin_src sh
     # search path for cd(1)
     # CDPATH=:$HOME
   #+end_src
* .profile
  :PROPERTIES:
  :header-args: :tangle .profile :shebang #!/bin/sh
  :END:
** header
   #+begin_src sh
     # ~/.profile
     # Environment and startup programs.
     # source /etc/profile if exist.
     # <alexforsale@yahoo.com>
     #
   #+end_src
** source system-wide configuration
   #+begin_src sh
     [ -f /etc/profile ] && . /etc/profile
   #+end_src
** set path for user executable directories
   #+begin_src sh
     # this goes first in case others needs it.
     if [ -d "${HOME}/bin" ] ; then
         export PATH="${HOME}/bin:${PATH}"
     fi
     if [ -d "$HOME/.local/bin" ];then
         export PATH="${HOME}/.local/bin:${PATH}"
     fi
   #+end_src
** load users modular configuration files
   #+begin_src sh
     # Loads user profiles if exists. Should be in ~/.profile.d
     # but let's not pollute ~ anymore.

     if [ -d "${HOME}/.config/profile.d" ]; then
         for profile in "${HOME}"/.config/profile.d/*.sh; do
             . "${profile}"
         done
         unset profile
     fi
   #+end_src
** ${PATH} cleanup
   #+begin_src sh
     if [ -n "${PATH}" ]; then
         old_PATH=${PATH}:; PATH=
         while [ -n "${old_PATH}" ]; do
             x=${old_PATH%%:*}       # the first remaining entry
             case ${PATH}: in
                 ,*:"$x":*) ;;         # already there
                 ,*) PATH=${PATH}:$x;;    # not there yet
             esac
             old_PATH=${old_PATH#*:}
         done
         PATH=${PATH#:}
         unset old_PATH x
     fi
   #+end_src
** load local profiles if exists
   #+begin_src sh
     # local ~/.profile
     if [ -r "${HOME}"/.config/profile.local ];then
         . "${HOME}"/.config/profile.local
     elif [ -r "${HOME}"/.profile.local ];then
         . "${HOME}"/.profile.local
     fi
   #+end_src
** bash specifics
   #+begin_src sh
     # if running bash
     if [ -n "${BASH_VERSION}" ]; then
         # include .bashrc if it exists
         if [ -f "${HOME}/.bashrc" ]; then
             . "${HOME}/.bashrc"
         fi
     fi
   #+end_src
* .config/profile.d
** 00-distro.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/00-distro.sh :mkdirp t :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/00-distro.sh
      # set distro environment
      # <alexforsale@yahoo.com>
    #+end_src
*** ${DISTRO} and ${DISTROVER}
    #+begin_src sh
      # set DISTRO and DISTROVER
      if [ -f /etc/os-release ]; then
          # freedesktop.org and systemd
          . /etc/os-release
          DISTRO="${ID}"
          DISTROVER="${VERSION_ID}"
          [ -z "${DISTROVER}" ] &&
              DISTROVER="${BUILD_ID}"
      elif [ "$(command -v lsb_release >/dev/null)" ]; then
          # linuxbase.org
          DISTRO="$(lsb_release -si | awk '{print tolower ($0)}')"
          DISTROVER="$(lsb_release -sr | awk '{print tolower ($0)}')"
      elif [ -f /etc/lsb-release ]; then
          # For some versions of Debian/Ubuntu without lsb_release command
          . /etc/lsb-release
          DISTRO="${DISTRIB_ID}"
          DISTROVER="${DISTRIB_RELEASE}"
      elif [ -f /etc/debian_version ]; then
          # Older Debian/Ubuntu/etc.
          DISTRO=Debian
          DISTROVER="$(cat /etc/debian_version)"
      else
          # Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
          DISTRO="$(uname -s)"
          DISTROVER="$(uname -r)"
      fi

      export DISTRO DISTROVER
    #+end_src
** 00-locale.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/00-locale.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/00-locale.sh
      # locale settings
      # <alexforsale@yahoo.com>
    #+end_src
*** ${LANG} and ${MM_CHARSET}
    #+begin_src sh
      # language
      [ -z "${LANG}" ] && export LANG=en_US.UTF-8
      [ -z "${MM_CHARSET}" ] && export MM_CHARSET=en_US.UTF-8
    #+end_src
** 01-xdg_base_directory.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/01-xdg_base_directory.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/01-xdg_base_directory.sh
      # XDG Base Directory specification
      # https://wiki.archlinux.org/index.php/XDG_BASE_Directory_support
      # <alexforsale@yahoo.com>
    #+end_src
*** ${XDG_CONFIG_HOME}
    #+begin_src sh
      if [ -z "${XDG_CONFIG_HOME}" ]; then
          if [ -d "${HOME}/.config" ]; then
              mkdir -p "${HOME}/.config"
          fi
      fi

      XDG_CONFIG_HOME="${HOME}/.config"
    #+end_src
*** ${XDG_CACHE_HOME}
    #+begin_src sh
      if [ -z "${XDG_CACHE_HOME}" ]; then
          if [ -d "${HOME}/.cache" ]; then
              mkdir -p "${HOME}/.cache"
          fi
      fi

      XDG_CACHE_HOME="${HOME}/.cache"
    #+end_src
*** ${XDG_DATA_HOME}
    #+begin_src sh
      if [ -z "${XDG_DATA_HOME}" ]; then
          if [ -d "${HOME}/.local/share" ]; then
              mkdir -p "${HOME}/.local/share"
          fi
      fi

      XDG_DATA_HOME="${HOME}/.local/share"
    #+end_src
*** ${XDG_RUNTIME_DIR}
    #+begin_src sh
      if [ -z "${XDG_RUNTIME_DIR}" ]; then
          case "${DISTRO}" in
              "gentoo")
                  XDG_RUNTIME_DIR="/tmp/$(id -u)-runtime-dir"
                  if [ ! -d "${XDG_RUNTIME_DIR}" ];then
                      mkdir -p "${XDG_RUNTIME_DIR}"
                      chmod 0700 "${XDG_RUNTIME_DIR}"
                  fi
                  ;;
              "arch")
                  XDG_RUNTIME_DIR="/run/user/$(id -u)"
                  if [ ! -d "${XDG_RUNTIME_DIR}" ];then
                      mkdir -p "${XDG_RUNTIME_DIR}"
                      chmod 0700 "${XDG_RUNTIME_DIR}"
                  fi
                  ;;
              "freebsd")
                  XDG_RUNTIME_DIR="/tmp/$(id -u)-runtime-dir"
                  if [ ! -d "${XDG_RUNTIME_DIR}" ];then
                      mkdir -p "${XDG_RUNTIME_DIR}"
                      chmod 0700 "${XDG_RUNTIME_DIR}"
                  fi
                  ;;
          esac
      fi
    #+end_src
*** ${DBUS_SESSION_BUS_ADDRESS}
    #+begin_src sh
      if [ -z "$DBUS_SESSION_BUS_ADDRESS" ]; then
          # differs per distro
          #DBUS_SESSION_BUS_ADDRESS="unix:path=${XDG_RUNTIME_DIR}/bus"
          eval `dbus-launch --sh-syntax`
      fi
    #+end_src
*** XDG User Directories
    #+begin_src sh
      # XDG User Directories
      # https://wiki.archlinux.org/index.php/XDG_user_directories
      [ -z "${XDG_DESKTOP_DIR}" ] && export XDG_DESKTOP_DIR="${HOME}/Desktop"
      [ -z "${XDG_DOWNLOAD_DIR}" ] && export XDG_DOWNLOAD_DIR="${HOME}/Downloads"
      [ -z "${XDG_TEMPLATES_DIR}" ] && export XDG_TEMPLATES_DIR="${HOME}/Templates"
      [ -z "${XDG_PUBLICSHARE_DIR}" ] && export XDG_PUBLICSHARE_DIR="${HOME}/Public"
      [ -z "${XDG_DOCUMENTS_DIR}" ] && export XDG_DOCUMENTS_DIR="${HOME}/Documents"
      [ -z "${XDG_MUSIC_DIR}" ] && export XDG_MUSIC_DIR="${HOME}/Music"
      [ -z "${XDG_PICTURES_DIR}" ] && export XDG_PICTURES_DIR="${HOME}/Pictures"
      [ -z "${XDG_VIDEOS_DIR}" ] && export XDG_VIDEOS_DIR="${HOME}/Videos"

      for dir in "${XDG_DESKTOP_DIR}" "${XDG_DOWNLOAD_DIR}" "${XDG_TEMPLATES_DIR}" \
                                      "${XDG_PUBLICSHARE_DIR}" "${XDG_DOCUMENTS_DIR}" "${XDG_MUSIC_DIR}" \
                                      "${XDG_PICTURES_DIR}" "${XDG_VIDEOS_DIR}";do
          if [ ! -d "${dir}" ] || [ ! -L "${dir}" ];then
              mkdir -p "${dir}" 2>/dev/null
          fi
      done
      unset dir
    #+end_src
*** Exports
    #+begin_src sh
      export XDG_CONFIG_HOME XDG_CACHE_HOME XDG_DATA_HOME XDG_RUNTIME_DIR DBUS_SESSION_BUS_ADDRESS
    #+end_src
** 02-editors.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/02-editors.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/02-editors.sh
      # ${EDITOR}, ${VISUAL} and ${ALTERNATE_EDITOR}
      # <alexforsale@yahoo.com>
    #+end_src
*** ${VISUAL} and ${EDITOR}
    #+begin_src sh
      # see https://unix.stackexchange.com/questions/4859/visual-vs-editor-what-s-the-difference
      if [ "$(command -v emacs)" ];then
          export VISUAL="${VISUAL:-emacsclient -c}"
          export EDITOR="${EDITOR:-emacsclient -t}"
          if [ -z "${ORG_DIR}" ];then
              [ ! -d ~/Documents/org ] &&
                  mkdir -p ~/Documents/org
          fi
          export ALTERNATE_EDITOR=${VISUAL}
      elif [ "$(command -v gvim)" ];then # in case it's available, I don't use much of this
          export EDITOR="${EDITOR:-vim}" # this should also installed
          export VISUAL="${VISUAL:-gvim}"
          export VIMINIT="let \$MYVIMRC=\"${XDG_CONFIG_HOME}/vim/vimrc\" | source \${MYVIMRC}"
      elif [ "$(command -v vim)" ];then # most distro provide this (linux that is)
          export EDITOR="${EDITOR:-vim}"
          export VISUAL="${VISUAL:-vim}"
          export VIMINIT="let \$MYVIMRC=\"${XDG_CONFIG_HOME}/vim/vimrc\" | source \${MYVIMRC}"
          mkdir -p "${XDG_CONFIG_HOME}/vim"
          touch "${XDG_CONFIG_HOME}/vim/vimrc"
      else
          [ $(command -v nvim) ] &&
              export EDITOR="${EDITOR:-nvim}"

          [ $(command -v leafpad) ] &&
              export EDITOR="${EDITOR:-leafpad}"

          [ $(command -v l3afpad) ] &&
              export EDITOR="${EDITOR:-l3afpad}"

          [ $(command -v kate) ] &&
              export EDITOR="${EDITOR:-kate}"

          [ $(command -v pluma) ] &&
              export EDITOR="${EDITOR:-pluma}"

          [ $(command -v kwrite) ] &&
              export EDITOR="${EDITOR:-kwrite}"

          [ $(command -v scribe) ] &&
              export EDITOR="${EDITOR:-scribe}"

          [ $(command -v geany) ] &&
              export EDITOR="${EDITOR:-geany}"

          [ $(command -v gedit) ] &&
              export EDITOR="${EDITOR:-gedit}"

          # most unix os provide this,
          [ $(command -v vi) ] &&
              export EDITOR="${EDITOR:-vi}"

          export VISUAL=${EDITOR}
          export ALTERNATE_EDITOR=${EDITOR}
      fi
    #+end_src
** 03-terminal.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/03-terminals.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/03-terminal.sh
      # ${TERMINAL} apps
      # <alexforsale@yahoo.com>
    #+end_src
*** ${TERMINAL}
    #+begin_src sh
      # Terminal apps
      if [ "$(command -v gnome-terminal)" ];then
          export TERMINAL=${TERMINAL:-gnome-terminal}
      elif [ "$(command -v terminator)" ];then
          export TERMINAL=${TERMINAL:-terminator}
      elif [ "$(command -v tilda)" ];then
          export TERMINAL=${TERMINAL:-tilda}
      elif [ "$(command -v guake)" ];then
          export TERMINAL=${TERMINAL:-guake}
      elif [ "$(command -v konsole)" ];then
          export TERMINAL=${TERMINAL:-yakuake}
      elif [ "$(command -v lxterminal)" ];then
          export TERMINAL=${TERMINAL:-lxterminal}
      elif [ "$(command -v yakuake)" ];then
          export TERMINAL=${TERMINAL:-konsole}
      elif [ "$(command -v st)" ];then
          export TERMINAL=${TERMINAL:-st}
      elif [ "$(command -v terminology)" ];then
          export TERMINAL=${TERMINAL:-terminology}
      elif [ "$(command -v xfce4-terminal)" ];then
          export TERMINAL=${TERMINAL:-xfce4-terminal}
      elif [ "$(command -v lilyterm)" ];then
          export TERMINAL=${TERMINAL:-lilyterm}
      elif [ "$(command -v urxvt)" ];then
          export TERMINAL=${TERMINAL:-urxvt}
      elif [ "$(command -v xterm)" ];then
          export TERMINAL=${TERMINAL:-xterm}
      fi
    #+end_src
** 04-security.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/04-security.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/04-security.sh
      # various security apps
      # <alexforsale@yahoo.com>
    #+end_src
*** ${GPG_TTY}
    #+begin_src sh
      # from https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html
      [ -z "${GPG_TTY}" ] && export GPG_TTY="$(tty)"
    #+end_src
*** ${SSH_CONNECTION}
    #+begin_src sh
      # https://wiki.gentoo.org/wiki/GnuPG#Automatically_starting_the_GPG_agent
      if [ -n "$SSH_CONNECTION" ] ;then
          export PINENTRY_USER_DATA="USE_CURSES=1"
      fi
    #+end_src
*** Pinentry and GPG Agent
    #+begin_src sh
      # gpg-agent
      case "${DISTRO}" in
          freebsd)
              for i in curses gnome3 gtk2 qt5 ; do
                  if [ $(command -v pinentry-${i}) ]; then
                      _PINENTRY="$(command -v pinentry-${i})"
                  else
                      _PINENTRY="$(command -v pinentry)"
                  fi
              done

              if [ ! "$(pgrep -u ${USER} -x gpg-agent)" ];then
                  /usr/local/bin/gpg-agent --enable-ssh-support \
                                           --pinentry-program ${_PINENTRY} \
                                           --daemon "$@"
                  if [ -f "${HOME}/.gpg-agent-info" ];then
                      . "${HOME}/.gpg-agent-info"
                      export GPG_AGENT_INFO SSH_AUTH_SOCK
                  fi
              fi
              ;;
          ,*)
              # append pinentry-program since its location varied for each distro
              [ -z "$(pgrep -u ${USER} -x gpg-agent)" ] &&
                  gpg-agent --pinentry-program "$(command -v pinentry)" > /dev/null 2>&1
              ;;
      esac
    #+end_src
*** Keychain
    #+begin_src sh
      # keychain
      # https://wiki.gentoo.org/wiki/Keychain
      if [ "$(command -v keychain)" ];then
          [ -z "${HOSTNAME}" ] && HOSTNAME="$(uname -n)"
          keychain --quiet --agents "gpg,ssh"
          [ -f "${HOME}/.keychain/${HOSTNAME}-sh" ] && \
              . "${HOME}/.keychain/${HOSTNAME}-sh"
          [ -f "${HOME}/.keychain/${HOSTNAME}-sh-gpg" ] && \
              . "${HOME}/.keychain/${HOSTNAME}-sh-gpg"
      fi
    #+end_src
** 05-filemanagers.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/05-filemanagers.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/05-filemanagers.sh
      # filemanager configuration
      # <alexforsale@yahoo.com>
    #+end_src
*** ${FILE}
    #+begin_src sh
      # file manager
      if [ "$(command -v ranger)" ];then
          export FILE=${FILE:-ranger}
      elif [ "$(command -v pcmanfm)" ]; then
          export FILE=${FILE:-pcmanfm}
      elif [ "$(command -v thunar)" ];then
          export FILE=${FILE:-thunar}
      elif [ "$(command -v caja)" ];then
          export FILE=${FILE:-caja}
      elif [ "$(command -v nautilus)" ];then
          export FILE=${FILE:-nautilus}
      elif [ "$(command -v nemo)" ];then
          export FILE=${FILE:-nemo}
      elif [ "$(command -v dolphin)" ];then
          export FILE${FILE:-dolpin}
      elif [ "$(command -v rox)" ];then
          export FILE=${FILE:-rox}
      fi
    #+end_src
** 06-browser.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/06-browser.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/06-browser.sh
      # ${BROWSER} configuration
      # <alexforsale@yahoo.com>
    #+end_src
*** ${BROWSER}
    #+begin_src sh
      # Browser
      if [ "$(command -v google-chrome-stable)" ]; then
          export BROWSER=${BROWSER:-google-chrome-stable}
      elif [ "$(command -v midori)" ];then
          export BROWSER=${BROWSER:-midori}
      elif [ "$(command -v qutebrowser)" ];then
          export BROWSER=${BROWSER:-qutebrowser}
      elif [ "$(command -v chromium)" ];then
          export BROWSER=${BROWSER:-chromium}
      elif [ "$(command -v firefox)" ];then
          export BROWSER=${BROWSER:-firefox}
      elif [ "$(command -v seamonkey)" ];then
          export BROWSER=${BROWSER:-seamonkey}
      elif [ "$(command -v falkon)" ];then
          export BROWSER=${BROWSER:-falkon}
      else
          [ $(command -v elinks) ] &&
              export BROWSER=${BROWSER:-elinks}

          [ $(command -v lynx) ] &&
              export BROWSER=${BROWSER:-lynx}

          [ $(command -v w3m) ] &&
              export BROWSER=${BROWSER:-w3m}

          [ $(command -v links) ] &&
              export BROWSER="${BROWSER:-links -g}"
      fi
    #+end_src
** 07-mail_apps.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/07-mail_apps.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/07-mail_apps.sh
      # ${MAIL_APP} configuration
      # <alexforsale@yahoo.com>
    #+end_src
*** ${MAIL_APP}
    #+begin_src sh
      if [ "$(command -v alpine)" ]; then
          export MAIL_APP=${MAIL_APP:-alpine}
      elif [ "$(command -v balsa)" ]; then
          export MAIL_APP=${MAIL_APP:-balsa}
      elif [ "$(command -v evolution)" ]; then
          export MAIL_APP=${MAIL_APP:-evolution}
      elif [ "$(command -v geary)" ]; then
          export MAIL_APP=${MAIL_APP:-geary}
      elif [ "$(command -v kmail)" ]; then
          export MAIL_APP=${MAIL_APP:-kmail}
      elif [ "$(command -v kube)" ]; then
          export MAIL_APP=${MAIL_APP:-kube}
      elif [ "$(command -v mailspring)" ]; then
          export MAIL_APP=${MAIL_APP:-mailspring}
      elif [ "$(command -v thunderbird)" ]; then
          export MAIL_APP=${MAIL_APP:-thunderbird}
      fi
    #+end_src
** 10-polybar.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/10-polybar.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/10-polybar.sh
      # polybar setup
      # <alexforsale@yahoo.com>
    #+end_src
*** Polybar
    #+begin_src sh
      if [ $(command -v polybar) ]; then
          if [ -n "${DISPLAY}" ];then
              if [ "$(command -v polybar)" ];then
                  if [ "${DISTRO}" = "freebsd" ]; then
                      # not all modules are available in freebsd
                      export POLYBAR_CONFIG="${POLYBAR_CONFIG:-desktop}"
                  else
                      # https://superuser.com/questions/877677/programatically-determine-if-an-script-is-being-executed-on-laptop-or-desktop/877796
                      case $(cat /sys/class/dmi/id/chassis_type 2>/dev/null) in
                          8|9|10|11)
                              # portable
                              export POLYBAR_CONFIG="${POLYBAR_CONFIG:-laptop}"
                              ;;
                          ,*)
                              export POLYBAR_CONFIG="${POLYBAR_CONFIG:-desktop}"
                              ;;
                      esac
                      if [ -n "$(ls -A /sys/class/power_supply/ 2>/dev/null)" ];then
                          POLYBAR_BATTERY="$(ls -A /sys/class/power_supply/ | grep 'BAT')"
                          POLYBAR_ADAPTER="$(ls -A /sys/class/power_supply/ | grep 'ADP')"
                      fi
                  fi
              fi
              # network interface
              if [ $(command -v nmcli) ]; then
                  export POLYBAR_ETH=$(nmcli device | awk '$2=="ethernet" {print $1}')
                  export POLYBAR_WLAN=$(nmcli device | awk '$2=="wifi" {print $1}')
              elif [ $(command -v ip) ]; then
                  export POLYBAR_ETH=$(ip link show | grep "state UP"| awk 'NR==1 {print $2}' |sed 's/\://')
                  #TODO: wireless
              fi
          fi
      fi
    #+end_src
** 10-themes.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/10-themes.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/10-themes.sh
      # themes configuration
      # <alexforsale@yahoo.com>
    #+end_src
** 99-cargo.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/99-cargo.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-cargo.sh
      # cargo configuration
      # https://wiki.archlinux.org/index.php/Rust#Cargo
      # <alexforsale@yahoo.com>
    #+end_src
*** Cargo Path
    #+begin_src sh
      if [ -d "$HOME/.cargo/bin" ];then
          export PATH=$HOME/.cargo/bin:$PATH
      fi
    #+end_src
** 99-ccache.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/99-ccache.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-ccache.sh
      # ccache configuration
      # <alexforsale@yahoo.com>
    #+end_src
*** ccache
    #+begin_src sh
      if [ "$(command -v ccache)" ] &&
             [ -d "/usr/lib/ccache/bin" ]; then
          if [ "${SHELL}" != "/bin/sh" ] &&
                 [ "$(command -v pathprepend)" ]; then
              pathprepend /usr/lib/ccache/bin
          else
              export PATH=/usr/lib/ccache/bin:"${PATH}"
          fi
      fi

      case "${DISTRO}" in
          "gentoo")
              [ -r /var/cache/ccache ] &&
                  export CCACHE_DIR="/var/cache/ccache"
              ;;
      esac
    #+end_src
** 99-doom_emacs.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/99-doom_emacs.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-doom_emacs.sh
      # doom emacs path
      # <alexforsale@yahoo.com>
    #+end_src
*** doom emacs
    #+begin_src sh
      if [ "$(command -v emacs)" ] &&
             [ -e ~/.emacs.d/bin/doom ];then
          [ ! $(command -v doom) ] &&
              export PATH=${PATH}:~/.emacs.d/bin
      fi
    #+end_src
** 99-elinks.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/99-elinks.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-elinks.sh
      # configuration for elinks
      # <alexforsale@yahoo.com>
    #+end_src
*** elinks
    #+begin_src sh
      if [ "$(command -v elinks)" ];then
          if [ -d "${XDG_CONFIG_HOME}"/elinks ];then
              if [ -d "${HOME}/.elinks" ]; then
                  mv "${HOME}/.elinks" "${XDG_CONFIG_HOME}/elinks"
              else
                  mkdir -p "${XDG_CONFIG_HOME}/elinks"
              fi
          fi
          export ELINKS_CONFDIR="${XDG_CONFIG_HOME}/elinks"
      fi
    #+end_src
** 99-emacs_vterm.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/99-emacs_vterm.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-emacs-vterm.sh
      # https://github.com/akermu/emacs-libvterm
      # <alexforsale@yahoo.com>
    #+end_src
*** don't source this in sh
    #+begin_src sh
      # dont' source this in sh
      if [ "${SHELL}" = "/bin/sh" ]; then
          return
      fi
    #+end_src
*** vterm_printf
    #+begin_src sh
      vterm_printf(){
          if [ -n "$TMUX" ]; then
              # Tell tmux to pass the escape sequences through
              # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
              printf "\ePtmux;\e\e]%s\007\e\\" "$1"
          elif [ "${TERM%%-*}" = "screen" ]; then
              # GNU screen (screen, screen-256color, screen-256color-bce)
              printf "\eP\e]%s\007\e\\" "$1"
          else
              printf "\e]%s\e\\" "$1"
          fi
      }
    #+end_src
*** clear
    #+begin_src sh
      if [[ "$INSIDE_EMACS" = 'vterm' ]]; then
          function clear(){
              vterm_printf "51;Evterm-clear-scrollback";
              tput clear;
          }
      fi
    #+end_src
*** vterm_cmd
    #+begin_src sh
      vterm_cmd() {
          local vterm_elisp
          vterm_elisp=""
          while [ $# -gt 0 ]; do
              vterm_elisp="$vterm_elisp""$(printf '"%s" ' "$(printf "%s" "$1" | sed -e 's|\\|\\\\|g' -e 's|"|\\"|g')")"
              shift
          done
          vterm_printf "51;E$vterm_elisp"
      }
    #+end_src
*** vterm_prompt_end
    #+begin_src sh
      vterm_prompt_end(){
          vterm_printf "51;A$(whoami)@$(hostname):$(pwd)"
      }
      PS1=$PS1'\[$(vterm_prompt_end)\]'
    #+end_src
** 99-freebsd.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/99-freebsd.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-freebsd.sh
      # configuration for FreeBSD
      # <alexforsale@yahoo.com>
    #+end_src
*** from the original /FreeBSD/ =~/.profile=
    #+begin_src sh
      if [ "${DISTRO}" = "freebsd" ];then
          ENV=${HOME}/.shrc; export ENV
          export PAGER=less
          [ -x /usr/bin/resizewin ] && /usr/bin/resizewin -z
          [ -x /usr/bin/fortune ] && /usr/bin/fortune freebsd-tips
          # Let sh(1) know it's at home, despite /home being a symlink.
          if [ "$PWD" != "$HOME" ] && [ "$PWD" -ef "$HOME" ] ; then cd ; fi
          cd ${HOME}
      fi
    #+end_src
** 99-go.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/99-go.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-go.sh
      # $GOPATH configuration
      # <alexforsale@yahoo.com>
    #+end_src
*** ${GOPATH}
    #+begin_src sh
      if [ "$(command -v go)" ];then
          # set GOPATH to ~/.local so we don't need
          # to add more PATH
          export GOPATH=${GOPATH:-~/.local}
      fi
    #+end_src
** 99-nano.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/99-nano.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-nano.sh
      # see https://nano-editor.org
      # <alexforsale@yahoo.com>
    #+end_src
*** nano
    #+begin_src sh
      if [ "$(command -v nano)" ]; then
          if [ ! -d "${XDG_CONFIG_HOME}/nano" ]; then
              mkdir -p "${XDG_CONFIG_HOME}/nano"
              if [ -f "${HOME}/.nanorc" ]; then
                  mv "${HOME}/.nanorc" "${XDG_CONFIG_HOME}/nanorc"
              fi
          else
              if [ -f "${HOME}/.nanorc" ]; then
                  mv "${HOME}/.nanorc" "${XDG_HOME_CONFIG}/nanorc.bak"
              fi
          fi
          # backups
          mkdir -p "${XDG_CONFIG_HOME}/nano/backups"
      fi
    #+end_src
** 99-npm.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/99-npm.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-npm.sh
      # node packaged module configuration
      # see https://wiki.archlinux.org/index.php/Node.js
      # <alexforsale@yahoo.com>
    #+end_src
*** npm
    #+begin_src sh
      if [ "$(command -v npm)" ];then
          if [ -d "$HOME/.node_modules/bin" ];then
              export PATH="$HOME/.node_modules/bin:$PATH"
          fi
          export npm_config_prefix=~/.node_modules
      fi
    #+end_src
** 99-perl.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/99-perl.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-perl.sh
      # configuration for perl
      # <alexforsale@yahoo.com>
    #+end_src
*** perl
    #+begin_src sh
      [ ! -d "${HOME}/.local/perl5/bin" ] &&
          mkdir -p "${HOME}/.local/perl5/bin"
      [ ! -d "${HOME}/.local/perl5/lib/perl5" ] &&
          mkdir -p "${HOME}/.local/perl5/lib/perl5"

      PATH="${HOME}/.local/perl5/bin${PATH:+:${PATH}}"
      PERL5LIB="${HOME}/.local/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"
      PERL_LOCAL_LIB_ROOT="${HOME}/.local/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"
      PERL_MB_OPT="--install_base \"${HOME}/.local/perl5\""
      PERL_MM_OPT="INSTALL_BASE=${HOME}/.local/perl5"

      export PATH PERL5LIB PERL_LOCAL_LIB_ROOT PERL_MB_OPT PERL_MM_OPT
    #+end_src
** 99-ruby.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/99-ruby.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-ruby.sh
      # ruby configuration
      # <alexforsale@yahoo.com>
    #+end_src
*** ruby
    #+begin_src sh
      if [ "$(command -v ruby)" ];then
          if [ -d "$(ruby -e 'print Gem.user_dir')/bin" ];then
              PATH="$(ruby -e 'print Gem.user_dir')/bin:$PATH"
          fi
      fi
      export PATH
    #+end_src
** 99-screen.sh
   :PROPERTIES:
   :header-args: :tangle .config/profile.d/99-screen.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-screen.sh
      # configuration for GNU Screen
      # <alexforsale@yahoo.com>
    #+end_src
*** screen
    #+begin_src sh
      if [ "$(command -v screen)" ] &&
             [ ! -d "${XDG_CONFIG_HOME}/screen" ]; then
          if [ -d "${HOME}/.screen" ]; then
              mv "${HOME}/.screen" "${XDG_CONFIG_HOME}/screen"
          else
              mkdir -p "${XDG_CONFIG_HOME}/screen"
          fi
      fi
      export SCREENDIR="${XDG_CONFIG_HOME}/screen"
      chmod 700 "${SCREENDIR}"
      export SCREENRC="${SCREENDIR}/config"
    #+end_src
