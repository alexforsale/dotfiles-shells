#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: Common Shells Startup Files
#+date: <2022-06-11 Sat>
#+author: Kristian Alexander P
#+email: alexforsale@yahoo.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.1 (Org mode 9.5.2)
#+cite_export:
#+property: EXPORT_FILE_NAME: index.html

* .shrc
  :PROPERTIES:
  :header-args: :tangle ~/.shrc :shebang #!/bin/sh
  :END:
** header
   #+begin_src sh
     # $FreeBSD$
     #
     # .shrc - bourne shell startup file
     #
     # This file will be used if the shell is invoked for interactive use and
     # the environment variable ENV is set to this file.
     #
     # see also sh(1), environ(7).
     #
   #+end_src
** umask
   #+begin_src sh
     # file permissions: rwxr-xr-x
     #
     # umask	022
   #+end_src
** vi-mode shell
   #+begin_src sh
     # Uncomment this to enable the builtin vi(1) command line editor in sh(1),
     # e.g. ESC to go into visual mode.
     # set -o vi
   #+end_src
** don't source this file if running =sh= or =dash=
   #+begin_src sh
     if ([ "${SHELL}" != "/bin/sh" ] && [ "${SHELL}" != "/bin/dash" ]);then
        return
     fi
   #+end_src
** some useful aliases
   #+begin_src sh
     alias h='fc -l'
     alias j=jobs
     alias m="$PAGER"
     alias ll='ls -laFo'
     alias l='ls -l'
     alias g='egrep -i'
   #+end_src
** be paranoid
   #+begin_src sh
     # # be paranoid
     # alias cp='cp -ip'
     # alias mv='mv -i'
     # alias rm='rm -i'
   #+end_src
** prompt
   #+begin_src sh
     # set prompt: ``username@hostname:directory $ ''
     if [ "${DISTRO}" = "freebsd" ]; then
         PS1="\u@\h:\w \\$ "
     else
         PS1="${USER}@${HOSTNAME}:\${PWD} $ "
     fi
   #+end_src
** cd path
   #+begin_src sh
     # search path for cd(1)
     # CDPATH=:$HOME
   #+end_src
* .login
  :PROPERTIES:
  :header-args: :tangle ~/.login :shebang #!/usr/bin/env tcsh
  :END:
** header
   #+begin_src csh
     # -*- mode: sh -*-
     # $FreeBSD$
     #
     # .login - csh login script, read by login shell, after `.cshrc' at login.
     #
     # See also csh(1), environ(7).
     #
  #+end_src
** config
  #+begin_src csh
     # Query terminal size; useful for serial lines.
     if ( -x /usr/bin/resizewin ) /usr/bin/resizewin -z
   #+end_src
* .logout
  :PROPERTIES:
  :header-args: :tangle ~/.logout :shebang #!/usr/bin/env tcsh
  :END:
** header
   #+begin_src csh
     # -*- mode: sh -*-
     #
     # .logout - csh logout script
     #
   #+end_src
** config
   #+begin_src csh
     if ( -x `which clear` ) clear
   #+end_src
* .profile
  :PROPERTIES:
  :header-args: :tangle ~/.profile :shebang #!/bin/sh
  :END:
** header
   #+begin_src sh
     # ~/.profile
     # Environment and startup programs.
     # source /etc/profile if exist.
     # <alexforsale@yahoo.com>
     #
   #+end_src
** source system-wide configuration
   #+begin_src sh
     [ -f /etc/profile ] && . /etc/profile
   #+end_src
** set path for user executable directories
   #+begin_src sh
     # this goes first in case others needs it.
     if [ -d "${HOME}/bin" ] ; then
         export PATH="${HOME}/bin:${PATH}"
     fi
     if [ -d "$HOME/.local/bin" ];then
        export PATH="${HOME}/.local/bin:${PATH}"
     fi
   #+end_src
** load users modular configuration files
   #+begin_src sh
     # Loads user profiles if exists. Should be in ~/.profile.d
     # but let's not pollute ~ anymore.

     if [ -d "${HOME}/.config/profile.d" ]; then
         for profile in "${HOME}"/.config/profile.d/*.sh; do
             . "${profile}"
         done
         unset profile
     fi
   #+end_src
** ${PATH} cleanup
   #+begin_src sh
     if [ -n "${PATH}" ]; then
         old_PATH=${PATH}:; PATH=
         while [ -n "${old_PATH}" ]; do
             x=${old_PATH%%:*}       # the first remaining entry
             case ${PATH}: in
                 ,*:"$x":*) ;;         # already there
                 ,*) PATH=${PATH}:$x;;    # not there yet
             esac
             old_PATH=${old_PATH#*:}
         done
         PATH=${PATH#:}
         unset old_PATH x
     fi
   #+end_src
** load local profiles if exists
   #+begin_src sh
     # local ~/.profile
     if [ -r "${HOME}"/.config/profile.local ];then
        . "${HOME}"/.config/profile.local
        elif [ -r "${HOME}"/.profile.local ];then
             . "${HOME}"/.profile.local
        fi
   #+end_src
** bash specifics
   #+begin_src sh
     # if running bash
     if [ -n "${BASH_VERSION}" ]; then
         # include .bashrc if it exists
         if [ -f "${HOME}/.bashrc" ]; then
             . "${HOME}/.bashrc"
         fi
     fi
   #+end_src
* .config/profile.d
** 00-distro.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/00-distro.sh :mkdirp t :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/00-distro.sh
      # set distro environment
      # <alexforsale@yahoo.com>
    #+end_src
*** ${DISTRO} and ${DISTROVER}
    #+begin_src sh
      # set DISTRO and DISTROVER
      if [ -f /etc/os-release ]; then
          # freedesktop.org and systemd
          . /etc/os-release
          DISTRO="${ID}"
          DISTROVER="${VERSION_ID}"
          [ -z "${DISTROVER}" ] &&
              DISTROVER="${BUILD_ID}"
      elif [ "$(command -v lsb_release >/dev/null)" ]; then
          # linuxbase.org
          DISTRO="$(lsb_release -si | awk '{print tolower ($0)}')"
          DISTROVER="$(lsb_release -sr | awk '{print tolower ($0)}')"
      elif [ -f /etc/lsb-release ]; then
          # For some versions of Debian/Ubuntu without lsb_release command
          . /etc/lsb-release
          DISTRO="${DISTRIB_ID}"
          DISTROVER="${DISTRIB_RELEASE}"
      elif [ -f /etc/debian_version ]; then
          # Older Debian/Ubuntu/etc.
          DISTRO=Debian
          DISTROVER="$(cat /etc/debian_version)"
      else
          # Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
          DISTRO="$(uname -s)"
          DISTROVER="$(uname -r)"
      fi

      export DISTRO DISTROVER
    #+end_src
** 00-locale.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/00-locale.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/00-locale.sh
      # locale settings
      # <alexforsale@yahoo.com>
    #+end_src
*** ${LANG} and ${MM_CHARSET}
    #+begin_src sh
      # language
      [ -z "${LANG}" ] && export LANG=en_US.UTF-8
      [ -z "${MM_CHARSET}" ] && export MM_CHARSET=en_US.UTF-8
    #+end_src
** =01-xdg_base_directory.sh=
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/01-xdg_base_directory.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/01-xdg_base_directory.sh
      # XDG Base Directory specification
      # https://wiki.archlinux.org/index.php/XDG_BASE_Directory_support
      # <alexforsale@yahoo.com>
    #+end_src
*** =${XDG_CONFIG_HOME}=
    #+begin_src sh
      if [ -z "${XDG_CONFIG_HOME}" ]; then
          if [ -d "${HOME}/.config" ]; then
              mkdir -p "${HOME}/.config"
          fi
      fi

      XDG_CONFIG_HOME="${HOME}/.config"
    #+end_src
*** =${XDG_CACHE_HOME}=
    #+begin_src sh
      if [ -z "${XDG_CACHE_HOME}" ]; then
          if [ -d "${HOME}/.cache" ]; then
              mkdir -p "${HOME}/.cache"
          fi
      fi

      XDG_CACHE_HOME="${HOME}/.cache"
    #+end_src
*** =${XDG_DATA_HOME}=
    #+begin_src sh
      if [ -z "${XDG_DATA_HOME}" ]; then
          if [ -d "${HOME}/.local/share" ]; then
              mkdir -p "${HOME}/.local/share"
          fi
      fi

      XDG_DATA_HOME="${HOME}/.local/share"
    #+end_src
*** =${XDG_RUNTIME_DIR}=
    #+begin_src sh
      if [ -z "${XDG_RUNTIME_DIR}" ]; then
          case "${DISTRO}" in
              "gentoo")
                  XDG_RUNTIME_DIR="/tmp/$(id -u)-runtime-dir"
                  if [ ! -d "${XDG_RUNTIME_DIR}" ];then
                     mkdir -p "${XDG_RUNTIME_DIR}"
                     chmod 0700 "${XDG_RUNTIME_DIR}"
                  fi
                     ;;
                     "arch")
                         XDG_RUNTIME_DIR="/run/user/$(id -u)"
                         if [ ! -d "${XDG_RUNTIME_DIR}" ];then
                            mkdir -p "${XDG_RUNTIME_DIR}"
                            chmod 0700 "${XDG_RUNTIME_DIR}"
                         fi
                            ;;
                            "freebsd")
                                XDG_RUNTIME_DIR="/tmp/$(id -u)-runtime-dir"
                                if [ ! -d "${XDG_RUNTIME_DIR}" ];then
                                   mkdir -p "${XDG_RUNTIME_DIR}"
                                   chmod 0700 "${XDG_RUNTIME_DIR}"
                                fi
                                   ;;
          esac
      fi
    #+end_src
*** =${DBUS_SESSION_BUS_ADDRESS}=
    #+begin_src sh
      if [ -z "$DBUS_SESSION_BUS_ADDRESS" ]; then
          # differs per distro
          #DBUS_SESSION_BUS_ADDRESS="unix:path=${XDG_RUNTIME_DIR}/bus"
          eval `dbus-launch --sh-syntax`
      fi
    #+end_src
*** XDG User Directories
    #+begin_src sh
      # XDG User Directories
      # https://wiki.archlinux.org/index.php/XDG_user_directories
      [ -z "${XDG_DESKTOP_DIR}" ] && export XDG_DESKTOP_DIR="${HOME}/Desktop"
      [ -z "${XDG_DOWNLOAD_DIR}" ] && export XDG_DOWNLOAD_DIR="${HOME}/Downloads"
      [ -z "${XDG_TEMPLATES_DIR}" ] && export XDG_TEMPLATES_DIR="${HOME}/Templates"
      [ -z "${XDG_PUBLICSHARE_DIR}" ] && export XDG_PUBLICSHARE_DIR="${HOME}/Public"
      [ -z "${XDG_DOCUMENTS_DIR}" ] && export XDG_DOCUMENTS_DIR="${HOME}/Documents"
      [ -z "${XDG_MUSIC_DIR}" ] && export XDG_MUSIC_DIR="${HOME}/Music"
      [ -z "${XDG_PICTURES_DIR}" ] && export XDG_PICTURES_DIR="${HOME}/Pictures"
      [ -z "${XDG_VIDEOS_DIR}" ] && export XDG_VIDEOS_DIR="${HOME}/Videos"

      for dir in "${XDG_DESKTOP_DIR}" "${XDG_DOWNLOAD_DIR}" "${XDG_TEMPLATES_DIR}" \
                                      "${XDG_PUBLICSHARE_DIR}" "${XDG_DOCUMENTS_DIR}" "${XDG_MUSIC_DIR}" \
                                      "${XDG_PICTURES_DIR}" "${XDG_VIDEOS_DIR}";do
                 if [ ! -d "${dir}" ] || [ ! -L "${dir}" ];then
                    mkdir -p "${dir}" 2>/dev/null
                 fi
              done
                 unset dir
    #+end_src
*** Nix inside Guix
    #+begin_src sh
      if [ -n "${GUIX_LOCPATH}" ] ||
             [ "${DISTRO}" = "guix" ]; then
          [ -d "${HOME}/.nix-profile/share" ] && export XDG_DATA_DIRS="${XDG_DATA_DIRS}:${HOME}/.nix-profile/share"
      fi
    #+end_src
*** Exports
    #+begin_src sh
      export XDG_CONFIG_HOME XDG_CACHE_HOME XDG_DATA_HOME XDG_RUNTIME_DIR DBUS_SESSION_BUS_ADDRESS
    #+end_src
** 02-editors.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/02-editors.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/02-editors.sh
      # ${EDITOR}, ${VISUAL} and ${ALTERNATE_EDITOR}
      # <alexforsale@yahoo.com>
    #+end_src
*** ${VISUAL} and ${EDITOR}
    #+begin_src sh
      # chemacs-profile
      if [ -e "${HOME}/.config/chemacs/profile" ]; then
          export CHEMACS_PROFILE="$(cat ${HOME}/.config/chemacs/profile)"
      elif [ -e "${HOME}/.emacs-profile" ]; then
          export CHEMACS_PROFILE="$(cat ${HOME}/.emacs-profile)"
      fi

      [ -n "${CHEMACS_PROFILE}" ] && emacs_args="-s ${CHEMACS_PROFILE}"

      # see https://unix.stackexchange.com/questions/4859/visual-vs-editor-what-s-the-difference
      if [ "$(command -v emacs)" ];then
         export VISUAL="${VISUAL:-emacsclient -c} ${emacs_args}"
         export EDITOR="${EDITOR:-emacsclient -t} ${emacs_args}"
         if [ -z "${ORG_DIR}" ];then
            [ ! -d ~/Documents/org ] &&
                mkdir -p ~/Documents/org
         fi
            export ALTERNATE_EDITOR=${VISUAL}
            elif [ "$(command -v gvim)" ];then # in case it's available, I don't use much of this
                 export EDITOR="${EDITOR:-vim}" # this should also installed
                 export VISUAL="${VISUAL:-gvim}"
                 export VIMINIT="let \$MYVIMRC=\"${XDG_CONFIG_HOME}/vim/vimrc\" | source \${MYVIMRC}"
            elif [ "$(command -v vim)" ];then # most distro provide this (linux that is)
                 export EDITOR="${EDITOR:-vim}"
                 export VISUAL="${VISUAL:-vim}"
                 export VIMINIT="let \$MYVIMRC=\"${XDG_CONFIG_HOME}/vim/vimrc\" | source \${MYVIMRC}"
                 mkdir -p "${XDG_CONFIG_HOME}/vim"
                 touch "${XDG_CONFIG_HOME}/vim/vimrc"
            else
                [ $(command -v nvim) ] &&
                    export EDITOR="${EDITOR:-nvim}"

                [ $(command -v leafpad) ] &&
                    export EDITOR="${EDITOR:-leafpad}"

                [ $(command -v l3afpad) ] &&
                    export EDITOR="${EDITOR:-l3afpad}"

                [ $(command -v kate) ] &&
                    export EDITOR="${EDITOR:-kate}"

                [ $(command -v pluma) ] &&
                    export EDITOR="${EDITOR:-pluma}"

                [ $(command -v kwrite) ] &&
                    export EDITOR="${EDITOR:-kwrite}"

                [ $(command -v scribe) ] &&
                    export EDITOR="${EDITOR:-scribe}"

                [ $(command -v geany) ] &&
                    export EDITOR="${EDITOR:-geany}"

                [ $(command -v gedit) ] &&
                    export EDITOR="${EDITOR:-gedit}"

                # most unix os provide this,
                [ $(command -v vi) ] &&
                    export EDITOR="${EDITOR:-vi}"

                export VISUAL=${EDITOR}
                export ALTERNATE_EDITOR=${EDITOR}
            fi
    #+end_src
** 03-terminal.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/03-terminals.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/03-terminal.sh
      # ${TERMINAL} apps
      # <alexforsale@yahoo.com>
    #+end_src
*** ${TERMINAL}
    #+begin_src sh
      # Terminal apps
      if [ "$(command -v gnome-terminal)" ];then
         export TERMINAL=${TERMINAL:-gnome-terminal}
         elif [ "$(command -v terminator)" ];then
              export TERMINAL=${TERMINAL:-terminator}
         elif [ "$(command -v tilda)" ];then
              export TERMINAL=${TERMINAL:-tilda}
         elif [ "$(command -v guake)" ];then
              export TERMINAL=${TERMINAL:-guake}
         elif [ "$(command -v konsole)" ];then
              export TERMINAL=${TERMINAL:-yakuake}
         elif [ "$(command -v lxterminal)" ];then
              export TERMINAL=${TERMINAL:-lxterminal}
         elif [ "$(command -v yakuake)" ];then
              export TERMINAL=${TERMINAL:-konsole}
         elif [ "$(command -v st)" ];then
              export TERMINAL=${TERMINAL:-st}
         elif [ "$(command -v terminology)" ];then
              export TERMINAL=${TERMINAL:-terminology}
         elif [ "$(command -v xfce4-terminal)" ];then
              export TERMINAL=${TERMINAL:-xfce4-terminal}
         elif [ "$(command -v lilyterm)" ];then
              export TERMINAL=${TERMINAL:-lilyterm}
         elif [ "$(command -v urxvt)" ];then
              export TERMINAL=${TERMINAL:-urxvt}
         elif [ "$(command -v xterm)" ];then
              export TERMINAL=${TERMINAL:-xterm}
         fi
    #+end_src
** 04-security.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/04-security.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/04-security.sh
      # various security apps
      # <alexforsale@yahoo.com>
    #+end_src
*** =${GPG_TTY}=
    #+begin_src sh
      # from https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html
      [ -z "${GPG_TTY}" ] && export GPG_TTY="$(tty)"
    #+end_src
*** =${SSH_CONNECTION}=
    #+begin_src sh
      # https://wiki.gentoo.org/wiki/GnuPG#Automatically_starting_the_GPG_agent
      if [ -n "$SSH_CONNECTION" ] ;then
         export PINENTRY_USER_DATA="USE_CURSES=1"
      fi
    #+end_src
*** Pinentry and GPG Agent
    #+begin_src sh
      # gpg-agent
      case "${DISTRO}" in
          freebsd)
              for i in curses gnome3 gtk2 qt5 ; do
                  if [ $(command -v pinentry-${i}) ]; then
                      _PINENTRY="$(command -v pinentry-${i})"
                  else
                      _PINENTRY="$(command -v pinentry)"
                  fi
              done

              if [ ! "$(pgrep -u ${USER} -x gpg-agent)" ];then
                 /usr/local/bin/gpg-agent --enable-ssh-support \
                                          --pinentry-program ${_PINENTRY} \
                                          --daemon "$@"
                 if [ -f "${HOME}/.gpg-agent-info" ];then
                    . "${HOME}/.gpg-agent-info"
                    export GPG_AGENT_INFO SSH_AUTH_SOCK
                 fi
                 fi
                    ;;
                    ,*)
                        # append pinentry-program since its location varied for each distro
                        [ -z "$(pgrep -u ${USER} -x gpg-agent)" ] &&
                            gpg-agent --pinentry-program "$(command -v pinentry)" > /dev/null 2>&1
                        ;;
      esac
    #+end_src
*** set ssh auth sock
    #+begin_src sh
      unset SSH_AGENT_PID
      if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
          export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
      fi
    #+end_src
*** Keychain
    #+begin_src sh
      # keychain
      # https://wiki.gentoo.org/wiki/Keychain
      if [ "$(command -v keychain)" ];then
         [ -z "${HOSTNAME}" ] && HOSTNAME="$(uname -n)"
         keychain --quiet --agents "gpg,ssh"
         [ -f "${HOME}/.keychain/${HOSTNAME}-sh" ] && \
             . "${HOME}/.keychain/${HOSTNAME}-sh"
         [ -f "${HOME}/.keychain/${HOSTNAME}-sh-gpg" ] && \
             . "${HOME}/.keychain/${HOSTNAME}-sh-gpg"
      fi
    #+end_src
** 05-filemanagers.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/05-filemanagers.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/05-filemanagers.sh
      # filemanager configuration
      # <alexforsale@yahoo.com>
    #+end_src
*** ${FILE}
    #+begin_src sh
      # file manager
      if [ "$(command -v ranger)" ];then
         export FILE=${FILE:-ranger}
         elif [ "$(command -v pcmanfm)" ]; then
          export FILE=${FILE:-pcmanfm}
         elif [ "$(command -v thunar)" ];then
              export FILE=${FILE:-thunar}
         elif [ "$(command -v caja)" ];then
              export FILE=${FILE:-caja}
         elif [ "$(command -v nautilus)" ];then
              export FILE=${FILE:-nautilus}
         elif [ "$(command -v nemo)" ];then
              export FILE=${FILE:-nemo}
         elif [ "$(command -v dolphin)" ];then
              export FILE${FILE:-dolpin}
         elif [ "$(command -v rox)" ];then
              export FILE=${FILE:-rox}
         fi
    #+end_src
** 06-browser.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/06-browser.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/06-browser.sh
      # ${BROWSER} configuration
      # <alexforsale@yahoo.com>
    #+end_src
*** ${BROWSER}
    #+begin_src sh
      # Browser
      if [ "$(command -v google-chrome-stable)" ]; then
          export BROWSER=${BROWSER:-google-chrome-stable}
      elif [ "$(command -v midori)" ];then
           export BROWSER=${BROWSER:-midori}
      elif [ "$(command -v qutebrowser)" ];then
           export BROWSER=${BROWSER:-qutebrowser}
      elif [ "$(command -v chromium)" ];then
           export BROWSER=${BROWSER:-chromium}
      elif [ "$(command -v firefox)" ];then
           export BROWSER=${BROWSER:-firefox}
      elif [ "$(command -v seamonkey)" ];then
           export BROWSER=${BROWSER:-seamonkey}
      elif [ "$(command -v falkon)" ];then
           export BROWSER=${BROWSER:-falkon}
      else
          [ $(command -v elinks) ] &&
              export BROWSER=${BROWSER:-elinks}

          [ $(command -v lynx) ] &&
              export BROWSER=${BROWSER:-lynx}

          [ $(command -v w3m) ] &&
              export BROWSER=${BROWSER:-w3m}

          [ $(command -v links) ] &&
              export BROWSER="${BROWSER:-links -g}"
      fi
    #+end_src
** =07-mail_apps.sh=
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/07-mail_apps.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/07-mail_apps.sh
      # ${MAIL_APP} configuration
      # <alexforsale@yahoo.com>
    #+end_src
*** =${MAIL_APP}=
    #+begin_src sh
      if [ "$(command -v alpine)" ]; then
          export MAIL_APP=${MAIL_APP:-alpine}
      elif [ "$(command -v balsa)" ]; then
          export MAIL_APP=${MAIL_APP:-balsa}
      elif [ "$(command -v evolution)" ]; then
          export MAIL_APP=${MAIL_APP:-evolution}
      elif [ "$(command -v geary)" ]; then
          export MAIL_APP=${MAIL_APP:-geary}
      elif [ "$(command -v kmail)" ]; then
          export MAIL_APP=${MAIL_APP:-kmail}
      elif [ "$(command -v kube)" ]; then
          export MAIL_APP=${MAIL_APP:-kube}
      elif [ "$(command -v mailspring)" ]; then
          export MAIL_APP=${MAIL_APP:-mailspring}
      elif [ "$(command -v thunderbird)" ]; then
          export MAIL_APP=${MAIL_APP:-thunderbird}
      fi
    #+end_src
** 10-polybar.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/10-polybar.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/10-polybar.sh
      # polybar setup
      # <alexforsale@yahoo.com>
    #+end_src
*** Polybar
    #+begin_src sh
      if [ $(command -v polybar) ]; then
          if [ -n "${DISPLAY}" ];then
             if [ "$(command -v polybar)" ];then
                if [ "${DISTRO}" = "freebsd" ]; then
                    # not all modules are available in freebsd
                    export POLYBAR_CONFIG="${POLYBAR_CONFIG:-desktop}"
                else
                    # https://superuser.com/questions/877677/programatically-determine-if-an-script-is-being-executed-on-laptop-or-desktop/877796
                    case $(cat /sys/class/dmi/id/chassis_type 2>/dev/null) in
                        8|9|10|11)
                            # portable
                            export POLYBAR_CONFIG="${POLYBAR_CONFIG:-laptop}"
                            ;;
                        ,*)
                            export POLYBAR_CONFIG="${POLYBAR_CONFIG:-desktop}"
                            ;;
                    esac
                    if [ -n "$(ls -A /sys/class/power_supply/ 2>/dev/null)" ];then
                       POLYBAR_BATTERY="$(ls -A /sys/class/power_supply/ | grep 'BAT')"
                       POLYBAR_ADAPTER="$(ls -A /sys/class/power_supply/ | grep 'ADP')"
                    fi
                    fi
                    fi
                       # network interface
                       if [ $(command -v nmcli) ]; then
                           export POLYBAR_ETH=$(nmcli device | awk '$2=="ethernet" {print $1}')
                           export POLYBAR_WLAN=$(nmcli device | awk '$2=="wifi" {print $1}')
                       elif [ $(command -v ip) ]; then
                           export POLYBAR_ETH=$(ip link show | grep "state UP"| awk 'NR==1 {print $2}' |sed 's/\://')
                           #TODO: wireless
                       fi
                    fi
                    fi
    #+end_src
** 10-themes.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/10-themes.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/10-themes.sh
      # themes configuration
      # <alexforsale@yahoo.com>
    #+end_src
*** themes
    #+begin_src sh
      # wal
      #if [ "$(command -v wal)" ] && [ -z "${SSH_CLIENT}" ]; then
      #    wal -R
      #fi

      if [ -n "${DESKTOP_SESSION}" ]; then
          case ${XDG_CURRENT_DESKTOP} in
              "KDE")
                  if [ -n "${xrdb_args}" ]; then
                      $(command -v xrdb) -merge "${xrdb_args}" "${HOME}"/.Xresources >/dev/null 2>&1
                  fi
                  ;;
          esac
      fi
      export GTK_THEME=Arc-Dark
    #+end_src
** 99-cargo.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/99-cargo.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-cargo.sh
      # cargo configuration
      # https://wiki.archlinux.org/index.php/Rust#Cargo
      # <alexforsale@yahoo.com>
    #+end_src
*** Cargo Path
    #+begin_src sh
      if [ -d "$HOME/.cargo/bin" ];then
         export PATH=$HOME/.cargo/bin:$PATH
      fi
    #+end_src
** 99-ccache.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/99-ccache.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-ccache.sh
      # ccache configuration
      # <alexforsale@yahoo.com>
    #+end_src
*** ccache
    #+begin_src sh
      if [ "$(command -v ccache)" ] &&
             [ -d "/usr/lib/ccache/bin" ]; then
          if [ "${SHELL}" != "/bin/sh" ] &&
                 [ "$(command -v pathprepend)" ]; then
              pathprepend /usr/lib/ccache/bin
          else
              export PATH=/usr/lib/ccache/bin:"${PATH}"
          fi
      fi

      case "${DISTRO}" in
          "gentoo")
              [ -r /var/cache/ccache ] &&
                  export CCACHE_DIR="/var/cache/ccache"
              ;;
      esac
    #+end_src
** 99-dash.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/99-dash.sh :shebang #!/bin/sh
   :END:
   #+begin_src sh
     # ~/.config/profile.d/99-dash.sh
     # configuration for dash shells and other sh equivalent
     # <alexforsale@yahoo.com>

     if ([ "${SHELL}" = "/bin/sh" ] || [ "${SHELL}" = "/bin/dash" ]);then
        ENV=${HOME}/.shrc; export ENV
        [ -x /usr/bin/resizewin ] && /usr/bin/resizewin -z
     fi
   #+end_src
** =99-doom_emacs.sh=
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/99-doom_emacs.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-doom_emacs.sh
      # doom emacs path
      # <alexforsale@yahoo.com>
    #+end_src
*** doom emacs
    #+begin_src sh
      if [ "$(command -v emacs)" ] &&
             [ -e ~/.emacs.d/bin/doom ];then
         [ ! $(command -v doom) ] &&
             export PATH=${PATH}:~/.emacs.d/bin
      fi
    #+end_src
** 99-elinks.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/99-elinks.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-elinks.sh
      # configuration for elinks
      # <alexforsale@yahoo.com>
    #+end_src
*** elinks
    #+begin_src sh
      if [ "$(command -v elinks)" ];then
         if [ -d "${XDG_CONFIG_HOME}"/elinks ];then
            if [ -d "${HOME}/.elinks" ]; then
                mv "${HOME}/.elinks" "${XDG_CONFIG_HOME}/elinks"
            else
                mkdir -p "${XDG_CONFIG_HOME}/elinks"
            fi
         fi
            export ELINKS_CONFDIR="${XDG_CONFIG_HOME}/elinks"
         fi
    #+end_src
** =99-emacs_vterm.sh=
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/99-emacs_vterm.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-emacs-vterm.sh
      # https://github.com/akermu/emacs-libvterm
      # <alexforsale@yahoo.com>
    #+end_src
*** don't source this in sh
    #+begin_src sh
      # dont' source this in sh
      if [ "${SHELL}" = "/bin/sh" ]; then
          return
      fi
    #+end_src
*** =vterm_printf=
    #+begin_src sh
      vterm_printf(){
          if [ -n "$TMUX" ]; then
              # Tell tmux to pass the escape sequences through
              # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
              printf "\ePtmux;\e\e]%s\007\e\\" "$1"
          elif [ "${TERM%%-*}" = "screen" ]; then
              # GNU screen (screen, screen-256color, screen-256color-bce)
              printf "\eP\e]%s\007\e\\" "$1"
          else
              printf "\e]%s\e\\" "$1"
          fi
      }
    #+end_src
*** clear
    #+begin_src sh
      if [[ "$INSIDE_EMACS" = 'vterm' ]]; then
          function clear(){
              vterm_printf "51;Evterm-clear-scrollback";
              tput clear;
          }
      fi
    #+end_src
*** =vterm_cmd=
    #+begin_src sh
      vterm_cmd() {
          local vterm_elisp
          vterm_elisp=""
          while [ $# -gt 0 ]; do
              vterm_elisp="$vterm_elisp""$(printf '"%s" ' "$(printf "%s" "$1" | sed -e 's|\\|\\\\|g' -e 's|"|\\"|g')")"
              shift
          done
          vterm_printf "51;E$vterm_elisp"
      }
    #+end_src
*** =vterm_prompt_end=
    #+begin_src sh :tangle no
      vterm_prompt_end(){
          vterm_printf "51;A$(whoami)@$(hostname):$(pwd)"
      }
      PS1=$PS1'\[$(vterm_prompt_end)\]'
    #+end_src
** 99-freebsd.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/99-freebsd.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-freebsd.sh
      # configuration for FreeBSD
      # <alexforsale@yahoo.com>
    #+end_src
*** from the original /FreeBSD/ =~/.profile=
    #+begin_src sh
      if [ "${DISTRO}" = "freebsd" ];then
         ENV=${HOME}/.shrc; export ENV
         export PAGER=less
         [ -x /usr/bin/resizewin ] && /usr/bin/resizewin -z
         [ -x /usr/bin/fortune ] && /usr/bin/fortune freebsd-tips
         # Let sh(1) know it's at home, despite /home being a symlink.
         if [ "$PWD" != "$HOME" ] && [ "$PWD" -ef "$HOME" ] ; then cd ; fi
         cd ${HOME}
      fi
    #+end_src
** 99-go.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/99-go.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-go.sh
      # $GOPATH configuration
      # <alexforsale@yahoo.com>
    #+end_src
*** ${GOPATH}
    #+begin_src sh
      if [ "$(command -v go)" ];then
         # set GOPATH to ~/.local so we don't need
         # to add more PATH
         export GOPATH=${GOPATH:-~/.local}
      fi
    #+end_src
** 99-guix.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/99-guix.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-guix.sh
      # guix configuration
      # <alexforsale@yahoo.com>
    #+end_src
*** config
    #+begin_src sh
      if [ -n "${GUIX_LOCPATH}" ];then
         # add /bin and /usr/bin to path
         # to add more PATH
         export PATH=${PATH}:/bin
         export PATH=${PATH}:/usr/bin
         # set the GUIX_BUILD_OPTIONS
         export GUIX_BUILD_OPTIONS="${GUIX_BUILD_OPTIONS} -v 3 -c 2 -M 2"
      fi


    #+end_src
** 99-nano.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/99-nano.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-nano.sh
      # see https://nano-editor.org
      # <alexforsale@yahoo.com>
    #+end_src
*** nano
    #+begin_src sh
      if [ "$(command -v nano)" ]; then
          if [ ! -d "${XDG_CONFIG_HOME}/nano" ]; then
              mkdir -p "${XDG_CONFIG_HOME}/nano"
              if [ -f "${HOME}/.nanorc" ]; then
                  mv "${HOME}/.nanorc" "${XDG_CONFIG_HOME}/nanorc"
              fi
          else
              if [ -f "${HOME}/.nanorc" ]; then
                  mv "${HOME}/.nanorc" "${XDG_HOME_CONFIG}/nanorc.bak"
              fi
          fi
          # backups
          mkdir -p "${XDG_CONFIG_HOME}/nano/backups"
      fi
    #+end_src
** 99-npm.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/99-npm.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-npm.sh
      # node packaged module configuration
      # see https://wiki.archlinux.org/index.php/Node.js
      # <alexforsale@yahoo.com>
    #+end_src
*** npm
    #+begin_src sh
      if [ "$(command -v npm)" ];then
         export npm_config_prefix="${HOME}/.local"
      fi
    #+end_src
** 99-perl.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/99-perl.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-perl.sh
      # configuration for perl
      # <alexforsale@yahoo.com>
    #+end_src
*** perl
    #+begin_src sh
      [ ! -d "${HOME}/.local/perl5/bin" ] &&
          mkdir -p "${HOME}/.local/perl5/bin"
      [ ! -d "${HOME}/.local/perl5/lib/perl5" ] &&
          mkdir -p "${HOME}/.local/perl5/lib/perl5"

      PATH="${HOME}/.local/perl5/bin${PATH:+:${PATH}}"
      PERL5LIB="${HOME}/.local/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"
      PERL_LOCAL_LIB_ROOT="${HOME}/.local/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"
      PERL_MB_OPT="--install_base \"${HOME}/.local/perl5\""
      PERL_MM_OPT="INSTALL_BASE=${HOME}/.local/perl5"

      export PATH PERL5LIB PERL_LOCAL_LIB_ROOT PERL_MB_OPT PERL_MM_OPT
    #+end_src
** 99-ruby.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/99-ruby.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-ruby.sh
      # ruby configuration
      # <alexforsale@yahoo.com>
    #+end_src
*** ruby
    #+begin_src sh
      if [ "$(command -v ruby)" ] &&
             [ -d "$(ruby -e 'print Gem.user_dir')/bin" ];then
         PATH="$(ruby -e 'print Gem.user_dir')/bin:$PATH"
      fi
      export PATH
    #+end_src
** 99-nix.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/99-nix.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-ruby.sh
      # nix configuration
      # <alexforsale@yahoo.com>
    #+end_src
*** nix
    #+begin_src sh
      [ -d "${HOME}/.nix-profile/bin" ] && export PATH=${PATH}:${HOME}/.nix-profile/bin

      if [ -n "${GUIX_LOCPATH}" ]; then
          # source profile.d
          [ -e /run/current-system/profile/etc/profile.d/nix.sh ] && . /run/current-system/profile/etc/profile.d/nix.sh
          [ -e /run/current-system/profile/etc/profile.d/nix-daemon.sh ] && . /run/current-system/profile/etc/profile.d/nix-daemon.sh
          [ -d "${HOME}/.nix-profile/share/icons" ] && export XCURSOR_PATH="${XCURSOR_PATH}:${HOME}/.nix-profile/share/icons"
      fi
    #+end_src
** 99-screen.sh
   :PROPERTIES:
   :header-args: :tangle ~/.config/profile.d/99-screen.sh :shebang #!/bin/sh
   :END:
*** header
    #+begin_src sh
      # ~/.config/profile.d/99-screen.sh
      # configuration for GNU Screen
      # <alexforsale@yahoo.com>
    #+end_src
*** screen
    #+begin_src sh
      if [ "$(command -v screen)" ] &&
             [ ! -d "${XDG_CONFIG_HOME}/screen" ]; then
          if [ -d "${HOME}/.screen" ]; then
              mv "${HOME}/.screen" "${XDG_CONFIG_HOME}/screen"
          else
              mkdir -p "${XDG_CONFIG_HOME}/screen"
          fi
      fi
      export SCREENDIR="${XDG_CONFIG_HOME}/screen"
      chmod 700 "${SCREENDIR}"
      export SCREENRC="${SCREENDIR}/config"
    #+end_src
* Tcsh/csh
** tcshrc
   :PROPERTIES:
   :header-args: :tangle ~/.tcshrc :shebang #!/usr/bin/env tcsh
   :END:
   #+begin_src csh
     # -*-mode: csh -*-
     # ~/.tcshrc - Setup user shell environment
     #
     # See also tcsh(1), environ(7).
     #

     # /etc/csh.cshrc
     #     Read first by every shell.
     # /etc/csh.login
     #     Read by login shells after /etc/csh.cshrc.
     # ~/.tcshrc
     #     Read by every shell after /etc/csh.cshrc or its equivalent.
     # ~/.history
     #     Read by login shells after ~/.tcshrc if savehist is set. See also histfile.
     # ~/.login
     #     The shell reads ~/.login after ~/.tcshrc and ~/.history. See the version shell variable.
     # ~/.cshdirs
     #     Read by login shells after ~/.login if savedirs is set. See also dirsfile.
     # ~/.logout
     #     Read by login shells at logout.
     # /bin/sh
     #     Used to interpret shell scripts not starting with a #.
     # /tmp/sh*
     #     Temporary file for < <.

     if ( -d "${HOME}"/bin ) setenv PATH ${HOME}/bin:${PATH}
     if ( -d "${HOME}"/.local/bin ) setenv PATH ${HOME}/.local/bin:${PATH}

     foreach file ( ${HOME}/.config/profile.d/*.tcsh )
         source $file
     end

     # for the login screen
     if ( $?prompt ) then
         if ( -d "${HOME}"/.config/tcsh ) then
             foreach i ( "${HOME}"/.config/tcsh/*.tcsh )
                 source $i
             end
         endif
     endif
     unset i
   #+end_src
** profile.d
*** 00-distro.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/00-distro.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/00-distro.tcsh
      # set distro environment
      # <alexforsale@yahoo.com>

      # set DISTRO and DISTROVER
      if ( -f /etc/os-release ) then
          # freedesktop.org and systemd
          foreach p ( `awk -F'=' '{print $1}' /etc/os-release` )
              setenv $p `grep ^${p}= /etc/os-release | awk -F'=' '{print $2}'`
          end
          setenv DISTRO ${ID}
          if ( $?VERSION_ID ) then
              setenv DISTROVER ${VERSION_ID}
          else if ( $?BUILD_ID ) then
              setenv DISTROVER ${BUILD_ID}
          endif
          unsetenv p
          # remove other variables
          unsetenv NAME PRETTY_NAME ID BUILD_ID ANSI_COLOR HOME_URL DOCUMENTATION_URL \
                   SUPPORT_URL BUG_REPORT_URL LOGO
      else if ( -X lsb_release ) then
          setenv DISTRO `lsb_release -si | awk '{print tolower ($0)}'`
          setenv DISTROVER `lsb_release -sr | awk '{print tolower ($0)}'`
      else if ( -f /etc/lsb-release ) then
          foreach p ( `awk -F'=' '{print $1}' /etc/lsb-release` )
              setenv $p `grep ^$p /etc/lsb-release | awk -F'=' '{print $2}'`
          end
          setenv DISTRO ${DISTRIB_ID}
          setenv DISTROVER ${DISTRIB_RELEASE}
          unsetenv p LSB_VERSION DISTRIB_ID DISTRIB_RELEASE DISTRIB_DESCRIPTION
      else if ( -f /etc/debian_version )
          setenv DISTRO debian
          setenv DISTROVER `cat /etc/debian_version`
      else
          setenv DISTRO `uname -s | awk '{print tolower ($0)}'`
          setenv DISTROVER `uname -r`
      endif
    #+end_src
*** 00-locale.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/00-locale.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/00-locale.tcsh
      # locale settings
      # <alexforsale@yahoo.com>

      # language
      if ( ! $?LANG ) setenv LANG en_US.UTF-8
      if ( ! $?MM_CHARSET ) setenv MM_CHARSET $LANG
    #+end_src
*** =01-xdg_base_directory.tcsh=
    #+begin_src csh :tangle ~/.config/profile.d/01-xdg_base_directory.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/01-xdg_base_directory.tcsh
      # XDG Base Directory specification
      # https://wiki.archlinux.org/index.php/XDG_BASE_Directory_support
      # <alexforsale@yahoo.com>

      if ( ! $?XDG_CONFIG_HOME ) setenv XDG_CONFIG_HOME ${HOME}/.config
      if ( ! -d $XDG_CONFIG_HOME ) mkdir -p $XDG_CONFIG_HOME

      if ( ! $?XDG_CACHE_HOME ) setenv XDG_CACHE_HOME ${HOME}/.cache
      if ( ! -d $XDG_CACHE_HOME ) mkdir -p $XDG_CACHE_HOME

      if ( ! $?XDG_DATA_HOME ) setenv XDG_DATA_HOME ${HOME}/.local/share
      if ( ! -d $XDG_DATA_HOME ) mkdir -p $XDG_DATA_HOME

      if ( ! $?XDG_RUNTIME_DIR ) then
          switch ( $DISTRO )
              case gentoo:
              case freebsd:
                  setenv XDG_RUNTIME_DIR "/tmp/`id -u`-runtime-dir"
                  breaksw
              case arch:
              case artix:
                  setenv XDG_RUNTIME_DIR "/run/user/`id-u`"
                  breaksw
          endsw
          if ( ! -d $XDG_RUNTIME_DIR ) then
              mkdir -p $XDG_RUNTIME_DIR
              chmod 0700 $XDG_RUNTIME_DIR
          endif
      endif

      #if ( ! $?DBUS_SESSIONN_BUS_ADDRESS ) setenv DBUS_SESSION_BUS_ADDRESS "unix:path=${XDG_RUNTIME_DIR}/bus"

      # XDG User Directories
      # https://wiki.archlinux.org/index.php/XDG_user_directories
      if ( ! $?XDG_DESKTOP_DIR ) setenv XDG_DESKTOP_DIR "${HOME}/Desktop"
      if ( ! $?XDG_DESKTOP_DIR ) setenv XDG_DESKTOP_DIR "${HOME}/Desktop"
      if ( ! $?XDG_DOWNLOAD_DIR ) setenv XDG_DOWNLOAD_DIR "${HOME}/Downloads"
      if ( ! $?XDG_TEMPLATES_DIR ) setenv XDG_TEMPLATES_DIR "${HOME}/Templates"
      if ( ! $?XDG_PUBLICSHARE_DIR ) setenv XDG_PUBLICSHARE_DIR "${HOME}/Public"
      if ( ! $?XDG_DOCUMENTS_DIR ) setenv XDG_DOCUMENTS_DIR "${HOME}/Documents"
      if ( ! $?XDG_MUSIC_DIR ) setenv XDG_MUSIC_DIR "${HOME}/Music"
      if ( ! $?XDG_PICTURES_DIR ) setenv XDG_PICTURES_DIR "${HOME}/Pictures"
      if ( ! $?XDG_VIDEOS_DIR ) setenv XDG_VIDEOS_DIR "${HOME}/Videos"

      foreach dir ( $XDG_DESKTOP_DIR $XDG_DOWNLOAD_DIR $XDG_TEMPLATES_DIR \
                   $XDG_PUBLICSHARE_DIR $XDG_DOCUMENTS_DIR $XDG_MUSIC_DIR \
                   $XDG_PICTURES_DIR $XDG_VIDEOS_DIR)
          if ( ! -d $dir || -L $dir ) then
              mkdir -p $dir
          endif
      end
      unset dir

      # set the location for gtk2 rc file
      setenv GTK2_RC_FILES ${XDG_CONFIG_HOME}/gtk-2.0/gtkrc
      if ( ! -d ${GTK2_RC_FILES:h} ) mkdir -p ${GTK2_RC_FILES:h}
    #+end_src
*** 02-editors.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/01-editors.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/02-editors.tcsh
      # ${EDITOR}, ${VISUAL} and ${ALTERNATE_EDITOR}
      # <alexforsale@yahoo.com>

      switch ( $DISTRO )
          case gentoo:
              unsetenv VISUAL EDITOR
              breaksw
      endsw

      if ( -e "${HOME}/.config/chemacs/profile" ) then
         setenv CHEMACS_PROFILE `cat "${HOME}/.config/chemacs/profile"`
         else if ( -e "${HOME}/.emacs-profile" ) then
             setenv CHEMACS_PROFILE `cat "${HOME}/.emacs-profile"`
      endif

      if ( "${CHEMACS_PROFILE}" != "" ) then
        setenv emacs_args "-s ${CHEMACS_PROFILE}"
      endif

      # see https://unix.stackexchange.com/questions/4859/visual-vs-editor-what-s-the-difference
      if ( -X emacs ) then
          if ( ! $?VISUAL ) setenv VISUAL "emacsclient -c ${emacs_args}"
      endif

      # use vim if available for cli editor
      if ( -X nvim ) then
          if ( ! $?EDITOR ) setenv EDITOR nvim
      else if ( -X vim ) then
          if ( ! $?EDITOR ) setenv EDITOR vim
      else if ( -X emacs )
          if ( ! $?EDITOR ) setenv EDITOR "emacsclient -t ${emacs_args}"
      else
          if ( ! $?EDITOR ) setenv EDITOR vi
      endif

      if ( -X nvim-qt ) then
          if ( ! $?VISUAL ) setenv VISUAL nvim-qt
      endif

      if ( -X gvim ) then
          if ( ! $?VISUAL ) setenv VISUAL gvim
      endif

      #TODO: set VIMINIT and MYVIMRC

      foreach editor ( leafpad l3afpad kate pluma kwrite scribe geany gedit )
          if ( ! $?ALTERNATE_EDITOR  && -X $editor ) setenv ALTERNATE_EDITOR "$editor"
      end
      unset editor
    #+end_src
*** 03-terminals.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/03-terminal.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/03-terminal.tcsh
      # ${TERMINAL} apps
      # <alexforsale@yahoo.com>

      # Terminal apps
      foreach terminal ( xterm urxvt lilyterm xfce4-terminal terminology \
                        st konsole lxterminal yakuake guake tilda terminator\
                        gnome-terminal sakura )
          if ( ! $?TERMINAL ) then
              if ( -X $terminal ) setenv TERMINAL $terminal
          endif
      end
      unset terminal
    #+end_src
*** 04-security.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/04-security.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/04-security.tcsh
      # various security apps
      # <alexforsale@yahoo.com>

      # from https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html
      setenv GPG_TTY `tty`

      # https://wiki.gentoo.org/wiki/GnuPG#Automatically_starting_the_GPG_agent
      if ( $?SSH_CONNECTION ) setenv PINENTRY_USER_DATA "USE_CURSES=1"

      # gpg-agent freebsd
      switch ( $DISTRO )
          case freebsd:
              if ( ! `pgrep -u ${USER} -x gpg-agent` ) then
                  /usr/local/bin/gpg-agent --enable-ssh-support \
                                           --pinentry-program /usr/local/bin/pinentry \
                                           --daemon "$@"
                  if ( -f ${HOME}/.gpg-agent.info ) then
                      sh -c "source ${HOME}/.gpg-agent.info"
                  endif
              endif
              breaksw
          default:
              if ( ! `pgrep -u ${USER} -x gpg-agent` ) gpg-agent --pinentry-program `which pinentry` > /dev/null
              breaksw
      endsw

      # keychain
      # https://wiki.gentoo.org/wiki/Keychain
      if ( -X keychain ) then
          if ( ! $?HOSTNAME ) setenv HOSTNAME "`uname -n`"
          keychain --quiet --agents "gpg,ssh"
          if ( -f ${HOME}/.keychain/${HOSTNAME}-csh ) source ${HOME}/.keychain/${HOSTNAME}-csh
          if ( -f ${HOME}/.keychain/${HOSTNAME}-csh-gpg ) source ${HOME}/.keychain/${HOSTNAME}-csh-gpg
      endif
    #+end_src
*** 05-filemanagers.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/05-filemanagers.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/05-filemanagers.tcsh
      # filemanager configuration
      # <alexforsale@yahoo.com>

      # file manager
      foreach fileman ( ranger vifm pcmanfm thunar dolphin caja nautilus nemo rox )
          if ( -X $fileman ) then
              if ( ! $?FILE ) setenv FILE $fileman
          endif
      end
      unset fileman
    #+end_src
*** 06-browsers.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/06-browser.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/06-browser.tcsh
      # ${BROWSER} configuration
      # <alexforsale@yahoo.com>

      # Browser
      foreach browser ( google-chrome-stable midori qutebrowser chromium firefox seamonkey falkon elinks lynx w3m links nyxt )
          if ( -X $browser ) then
              if ( ! $?BROWSER ) setenv BROWSER $browser
          endif
      end
      unset browser

      # lynx configuration
      if ( -X lynx ) then
          setenv WWW_HOME "lite.duckduckgo.com/lite"
          if ( -f ${XDG_CONFIG_HOME}/lynx/lynx.cfg ) then
              setenv LYNX_CFG ${XDG_CONFIG_HOME}/lynx/lynx.cfg
              setenv LYNX_CFG_PATH ${XDG_CONFIG_HOME}/lynx
          endif
      endif
    #+end_src
*** 07-mail.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/07-mail_apps.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/07-mail_apps.tcsh
      # ${MAIL_APP} configuration
      # <alexforsale@yahoo.com>

      foreach mail ( alpine balsa evolution geary kmail kube mailspring thunderbird )
          if ( -X $mail ) then
              if ( ! $?MAIL_APP ) setenv MAIL_APP $mail
          endif
      end
      unset mail
    #+end_src
*** 08-themes.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/10-themes.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/10-themes.tcsh
      # themes configuration
      # <alexforsale@yahoo.com>

      # wal
      if ( -X wal ) then
          if ( ! $?SSH_CLIENT ) wal -R
      endif

      if ( $?DESKTOP_SESSION ) then
          if ( $?XDG_CURRENT_DESKTOP ) then
          switch ( $XDG_CURRENT_DESKTOP )
              case KDE:
                  if ( $?xrdb_args ) xrdb -merge "${xrdb_args}" ${HOME}/.Xresources
                  breaksw
          endsw
          endif
      endif
      setenv GTK_THEME "Arc-Dark"
    #+end_src
*** 99-cargo.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/99-cargo.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/99-cargo.tcsh
      # cargo configuration
      # https://wiki.archlinux.org/index.php/Rust#Cargo
      # <alexforsale@yahoo.com>
      if ( -d ${HOME}/.cargo/bin ) setenv PATH ${HOME}/.cargo/bin:${PATH}
    #+end_src
*** 99-ccache.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/99-ccache.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/99-ccache.tcsh
      # ccache configuration
      # <alexforsale@yahoo.com>

      if ( -X ccache ) then
          if ( -d /usr/lib/ccache/bin ) setenv PATH /usr/lib/ccache/bin:${PATH}
      endif

      switch ( $DISTRO )
          case gentoo:
              if ( -r /var/cache/ccache ) setenv CCACHE_DIR var/cache/ccache
              breaksw
      endsw
    #+end_src
*** 99-elinks.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/99-elinks.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/99-elinks.tcsh
      # configuration for elinks
      # <alexforsale@yahoo.com>

      if ( -X elinks ) then
          if ( ! -d ${XDG_CONFIG_HOME}/elinks ) mkdir -p ${XDG_CONFIG_HOME}/elinks
          if ( -d ${HOME}/.elinks ) then
              mv ${HOME}/.elinks/* ${XDG_CONFIG_HOME}/elinks
              rm -rf ${HOME}/.elinks
          endif
          setenv ELINKS_CONFDIR ${XDG_CONFIG_HOME}/elinks
      endif
    #+end_src
*** 99-fortune.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/99-fortune.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/99-fortune.tcsh
      # configuration for fortune
      # <alexforsale@yahoo.com>

      switch ( $DISTRO )
          case freebsd:
              if ( -X fortune ) fortune freebsd-tips
              breaksw
          case debian:
          case devuan:
              if ( -X fortune ) fortune debian-hints
              breaksw
          default:
              if ( -X fortune ) fortune linux
              breaksw
      endsw
    #+end_src
*** 99-go.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/99-go.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/99-go.tcsh
      # $GOPATH configuration
      # set GOPATH to ~/.local so we don't need
      # to add more PATH
      # <alexforsale@yahoo.com>

      if ( -X go ) then
          if ( ! $?GOPATH ) setenv GOPATH ${HOME}/.local
      endif
    #+end_src
*** 99-htop.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/99-htop.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/99-htop.tcsh
      # <alexforsale@yahoo.com>

      if ( -X htop ) then
          setenv HTOPRC ${XDG_CONFIG_HOME}/htop/htoprc
          mkdir -p ${HTOPRC:h}
      endif
    #+end_src
*** 99-nano.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/99-nano.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/99-nano.tcsh
      # see https://nano-editor.org
      # <alexforsale@yahoo.com>
      if ( -X nano ) then
          mkdir -p ${XDG_CONFIG_HOME}/nano
          if ( -f ${HOME}/.nanorc ) mv ${HOME}/.nanorc ${XDG_CONFIG_HOME}/nano/nanorc
      endif
    #+end_src
*** 99-npm.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/99-npm.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/99-npm.tcsh
      # node packaged module configuration
      # see https://wiki.archlinux.org/index.php/Node.js
      # <alexforsale@yahoo.com>
      if ( -X npm ) then
          setenv npm_config_prefix ${HOME}/.local
      endif
    #+end_src
*** 99-perl.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/99-perl.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/99-perl.tcsh
      # configuration for perl
      # <alexforsale@yahoo.com>

      if ( ! -d ${HOME}/.local/perl5/bin ) mkdir -p ${HOME}/.local/perl5/bin
      if ( ! -d ${HOME}/.local/perl5/lib/perl5 ) mkdir -p ${HOME}/.local/perl5/lib/perl5

      setenv PATH ${HOME}/.local/perl5/bin:${PATH}
      if ( $?PERL5LIB ) then
          setenv PERL5LIB ${HOME}/.local/perl5/lib/perl5:${PERL5LIB}
      else
          setenv PERL5LIB ${HOME}/.local/perl5/lib/perl5
      endif

      if ( $?PERL_LOCAL_LIB_ROOT ) then
          setenv PERL_LOCAL_LIB_ROOT ${HOME}/.local/perl5:${PERL_LOCAL_LIB_ROOT}
      else
          setenv PERL_LOCAL_LIB_ROOT ${HOME}/local/perl5
      endif

      setenv PERL_MB_OPT "--install_base ${HOME}/.local/perl5"
      setenv PERL_MM_OPT "INSTALL_BASE=${HOME}/.local/perl5"
    #+end_src
*** 99-ruby.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/99-ruby.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/99-ruby.tcsh
      # ruby configuration
      # <alexforsale@yahoo.com>
      if ( -X ruby ) then
          if ( -d `ruby -e 'print Gem.user_dir'`/bin ) setenv PATH "`ruby -e 'print Gem.user_dir'`/bin:${PATH}"
      endif
    #+end_src
*** 99-screen.tcsh
    #+begin_src csh :tangle ~/.config/profile.d/99-screen.tcsh :shebang #!/usr/bin/env tcsh
      # ~/.config/profile.d/99-screen.tcsh
      # configuration for GNU Screen
      # <alexforsale@yahoo.com>

      if ( -X screen ) then
          if ( ! -d ${XDG_CONFIG_HOME}/screen ) then
              mkdir -p ${XDG_CONFIG_HOME}/screen
              if ( -d ${HOME}/.screen ) then
                  mv ${HOME}/.screen/* ${XDG_CONFIG_HOME}/screen
                  rm -rf ${HOME}/.screen
              endif
          endif
      endif

      setenv SCREENDIR ${XDG_CONFIG_HOME}/screen
      chmod 0700 ${SCREENDIR}
      setenv SCREENRC ${SCREENDIR}/config
    #+end_src
** tcsh
*** aliases.tcsh
    #+begin_src csh :tangle ~/.config/tcsh/aliases.tcsh :mkdirp t :shebang #!/usr/bin/env tcsh
      # <alexforsale@yahoo.com>
      # tcsh aliases file

      unalias *

      alias	h	'history \!* 20'
      alias	j	'jobs -l'
      alias	ll	'ls -lAF'
      alias	md	mkdir
      alias	rd	rmdir
    #+end_src
*** bindkey.tcsh
    #+begin_src csh :tangle ~/.config/tcsh/bindkey.tcsh :mkdirp t :shebang #!/usr/bin/env tcsh
      # <alexforsale@yahoo.com>
      # tcsh keybinding file

      if ( $?tcsh ) then
          bindkey -e
          bindkey " " magic-space
          bindkey ^W backward-delete-word
          bindkey ^Z run-fg-editor
          bindkey ^[^W kill-region
      endif
    #+end_src
*** options.tcsh
    #+begin_src csh :tangle ~/.config/tcsh/options.tcsh :mkdirp t :shebang #!/usr/bin/env tcsh
      # <alexforsale@yahoo.com>
      # various tcsh options

      if ( $?prompt ) then
          set \
              autocorrect \
              autoexpand \
              autolist=ambiguous \
              correct=cmd \
              ellipsis \
              filec \
              history=1000 \
              killdup=erase \
              listjobs=long \
              listlinks \
              listmax=100 \
              nobeep \
      prompt='%N@%m:%B%c02%b%# ' \
              rmstar \
              savehist=(1000 merge) \

          unset promptchars

          switch ( "$OSTYPE" )
              case bsd44:
              case darwin:
              case FreeBSD:
              case NetBSD:
                  stty status ^G
                  if ( $?tcsh ) bindkey ^G stuff-char
                  breaksw
          endsw
      endif
    #+end_src
*** prompt.tcsh
    #+begin_src csh :tangle ~/.config/tcsh/prompt.tcsh :mkdirp t :shebang #!/usr/bin/env tcsh
      # prompt
      #  %/  The current working directory.
      #  %~  The current working directory, but with one's home
      #      directory represented by `~'
      #  %c[[0]n], %.[[0]n]
      #      The trailing component of the current working directory, or
      #      n trailing components if a digit n is given.  If n begins
      #      with `0'
      #  %C  Like %c, but without `~' substitution.
      #  %h, %!, !
      #      The current history event number.
      #  %M  The full hostname.
      #  %m  The hostname up to the first `.'.
      #  %S (%s)
      #      Start (stop) standout mode.
      #  %B (%b)
      #      Start (stop) boldfacing mode.
      #  %U (%u)
      #      Start (stop) underline mode.
      #  %t, %@
      #      The time of day in 12-hour AM/PM format.
      #  %T  Like `%t', but in 24-hour format
      #  %p  The `precise' time of day in 12-hour AM/PM format, with seconds.
      #  %P  Like `%p', but in 24-hour format
      #  \c  c is parsed as in bindkey.
      #  ^c  c is parsed as in bindkey.
      #  %%  A single `%'.
      #  %n  The user name.
      #  %N  The effective user name.
      #  %j  The number of jobs.
      #  %d  The weekday in `Day' format.
      #  %D  The day in `dd' format.
      #  %w  The month in `Mon' format.
      #  %W  The month in `mm' format.
      #  %y  The year in `yy' format.
      #  %Y  The year in `yyyy' format.
      #  %l  The shell's tty.
      #  %L  Clears from the end of the prompt to end of the display or
      #      the end of the line.
      #  %$  Expands the shell or environment variable name immediately
      #      after the `$'.
      #  %#  `>' (or the first character of the promptchars shell
      #      variable) for normal users, `#' (or the second character of
      #      promptchars) for the superuser.
      #  %{string%}
      #      Includes string as a literal escape sequence.
      #  %?  The return code of the command executed just before the
      #      prompt
      #  %R  In prompt2, the status of the parser.  In prompt3, the
      #      corrected string.  In history, the history string.
      #
      # examples:
      # standard prompt
      # %N@%m:%B%c02%b%#

      # from https://www.cs.umd.edu/~srhuang/teaching/code_snippets/prompt_color.tcsh.html
      # Colors!
      set     red="%{\033[1;31m%}"
      set   green="%{\033[0;32m%}"
      set  yellow="%{\033[1;33m%}"
      set    blue="%{\033[1;34m%}"
      set magenta="%{\033[1;35m%}"
      set purple="%{\033[0;35m%}"
      set    cyan="%{\033[1;36m%}"
      set   white="%{\033[0;37m%}"
      set     end="%{\033[0m%}" # This is needed at the end...

      switch ($DISTRO)
          case "freebsd":
              # red
              set prompt="${green}%n${red}@%m ${white}%~ ${green}%%${end} "
              breaksw
          case "artix":
          case "arch":
              set prompt="${green}%n${blue}@%m ${white}%~ ${green}%%${end} "
              breaksw
          case debian:
          case devuan:
          case ubuntu:
              # purple
              set prompt="${green}%n${purple}@%m ${white}%~ ${green}%%${end} "
              breaksw
          case gentoo:
              # purple
              set prompt="${green}%n${magenta}@%m ${white}%~ ${green}%%${end} "
              breaksw
          default:
              set prompt="${green}%n${yellow}@%m ${white}%~ ${green}%%${end} "
              breaksw
      endsw

      unset red green yellow blue magenta cyan yellow white purple end
    #+end_src
* zsh
** .zshenv
   #+begin_src sh :tangle ~/.zshenv :shebang #!/usr/bin/env zsh
     [ -z "${ZDOTDIR}" ] && export ZDOTDIR="${XDG_CONFIG_HOME:-$HOME/.config}/zsh"
   #+end_src
** ~/.config/zsh
*** .zshrc
    :PROPERTIES:
    :header-args: :tangle ~/.config/zsh/.zshrc :shebang #!/usr/bin/env zsh :mkdirp t
    :END:
**** config
     #+begin_src sh
       # <alexforsale@yahoo.com>
       # minimal zsh

       if [ -d "${ZDOTDIR}"/conf.d ]; then
           for files in "${ZDOTDIR}"/conf.d/*.zsh; do
               [ -r "${files}" ] &&
                   . "${files}"
           done

           unset files
       fi

       # local zshrc
       if [ -f "${ZDOTDIR}"/.zshrc.local ]; then
           . "${ZDOTDIR}"/.zshrc.local
       fi
     #+end_src
*** .zprofile
    :PROPERTIES:
    :header-args: :tangle ~/.config/zsh/.zprofile :shebang #!/usr/bin/env zsh
    :END:
**** config
     #+begin_src sh
       [ -e "${HOME}/.profile" ] && . "${HOME}/.profile"
     #+end_src
*** .zlogout
    :PROPERTIES:
    :header-args: :tangle ~/.config/zsh/.zlogout :shebang #!/usr/bin/env zsh
    :END:
**** config
     #+begin_src sh
       # <alexforsale@yahoo.com>

       if [ ${SHLVL} = 1 ]; then
           [ -x /usr/bin/clear ] && /usr/bin/clear
       fi

       # end of "${ZDOTDIR}"/.zlogout
     #+end_src
*** .zlogin
    :PROPERTIES:
    :header-args: :tangle ~/.config/zsh/.zlogin :shebang #!/usr/bin/env zsh
    :END:
**** config
     #+begin_src sh
       # .zlogin is sourced in login shells.  It should
       # contain commands that should be executed only in
       # login shells.  It should be used to set the terminal
       # type and run a series of external commands (fortune,
       # msgs, from, etc).
       #
       # <alexforsale@yahoo.com>
       mesg y
       #fortune linux
     #+end_src
** ~/.config/zsh/conf.d
*** 20-completions.zsh
    :PROPERTIES:
    :header-args: :tangle ~/.config/zsh/conf.d/20-completions.zsh :shebang #!/usr/bin/env zsh :mkdirp t
    :END:
**** header
     #+begin_src sh
       # <alexforsale@yahoo.com>
       # completions settings
     #+end_src
**** config
     #+begin_src sh
       # Tab completion
       autoload -Uz compinit && compinit
       autoload -Uz promptinit && promptinit
       setopt complete_in_word         # cd /ho/sco/tm<TAB> expands to /home/scott/tmp
       setopt auto_menu                # show completion menu on succesive tab presses
       setopt autocd                   # cd to a folder just by typing it's name
       ZLE_REMOVE_SUFFIX_CHARS=$' \t\n;&' # These "eat" the auto prior space after a tab complete

       autoload -U select-word-style
       select-word-style bash # only alphanumeric characters are considered word characters

       # formatting and messages
       zstyle ':completion:*' verbose yes
       zstyle ':completion:*:descriptions' format '%B%d%b'
       zstyle ':completion:*:messages' format '%d'
       zstyle ':completion:*:warnings' format 'No matches for: %d'
       zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
       zstyle ':completion:*' group-name ''

       # match uppercase from lowercase
       zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

       # offer indexes before parameters in subscripts
       zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters
     #+end_src
*** 20-modules.zsh
    :PROPERTIES:
    :header-args: :tangle ~/.config/zsh/conf.d/20-modules.zsh :shebang #!/usr/bin/env zsh
    :END:
**** header
     #+begin_src sh
       # <alexforsale@yahoo.com>
       # modules settings
     #+end_src
**** config
     #+begin_src sh
       # Autoload zsh modules when they are referenced
       zmodload -a zsh/zpty zpty
       zmodload -a zsh/zprof zprof
       zmodload -ap zsh/mapfile mapfile
       # stat(1) is now commonly an external command, so just load zstat
       zmodload -aF zsh/stat b:zstat
     #+end_src
*** 20-styles.zsh
    :PROPERTIES:
    :header-args: :tangle ~/.config/zsh/conf.d/20-styles.zsh :shebang #!/usr/bin/env zsh
    :END:
**** header
     #+begin_src sh
       # <alexforsale@yahoo.com>
       # ux, themes, and style settings
     #+end_src
**** config
     #+begin_src sh
       # ctrl-s will no longer freeze the terminal.
       stty erase "^?"

       # alert me if something failed
       #setopt printexitvalue

       # don't warn me about bg processes when exiting
       setopt nocheckjobs

       # try to avoid the 'zsh: no matches found...'
       setopt nonomatch

       if [ $(ls --version &>/dev/null) ]; then
           lsflags="--color --group-directories-first -F"
       else
           lsflags="-GF"
           export CLICOLOR=1
       fi

       # simple prompt
       case "${DISTRO}" in
           "artix"|"arch")
               # blue
               prompt="%F{green}%n%f%F{white}@%f%F{blue}%M%f: %F{white}%~%f %# "
               ;;
           "debian"|"devuan"|"ubuntu")
               prompt="%F{green}%n%f%F{white}@%f%F{purple}%M%f: %F{white}%~%f %# "
               ;;
           "freebsd")
               prompt="%F{green}%n%f%F{white}@%f%F{red}%M%f: %F{white}%~%f %# "
               ;;
           "gentoo")
               prompt="%F{green}%n%f%F{white}@%f%B%F{magenta}%M%f%b: %F{white}%~%f %# "
               ;;
       esac
     #+end_src
*** 21-bindings.zsh
    :PROPERTIES:
    :header-args: :tangle ~/.config/zsh/conf.d/21-bindings.zsh :shebang #!/usr/bin/env zsh
    :END:
**** header
     #+begin_src sh
       # <alexforsale@yahoo.com>
       # keybindings
     #+end_src
**** config
     #+begin_src sh
       bindkey -e # emacs key bindings
       # but use the vi navigation keys (hjkl) besides cursor keys in menu completion
       zstyle ':completion:*' menu select ''
       zmodload zsh/complist
       bindkey -M menuselect 'h' vi-backward-char        # left
       bindkey -M menuselect 'k' vi-up-line-or-history   # up
       bindkey -M menuselect 'l' vi-forward-char         # right
       bindkey -M menuselect 'j' vi-down-line-or-history # bottom
     #+end_src
*** 30-aliases.zsh
    :PROPERTIES:
    :header-args: :tangle ~/.config/zsh/conf.d/30-aliases.zsh :shebang #!/usr/bin/env zsh
    :END:
**** header
     #+begin_src sh
       # <alexforsale@yahoo.com>
       # zsh aliases
     #+end_src
**** config
     #+begin_src sh
       # Aliases
       alias ls="ls ${lsflags}"
       alias ll="ls ${lsflags} -l"
       alias la="ls ${lsflags} -la"
       alias h="history"
       alias hg="history -1000 | grep -i"
       alias m="less"
       alias dotconfig="$(command -v git) --git-dir=${HOME}/Projects/personal/dotfiles --work-tree=${HOME}"
     #+end_src
*** 30-history.zsh
    :PROPERTIES:
    :header-args: :tangle ~/.config/zsh/conf.d/30-history.zsh :shebang #!/usr/bin/env zsh
    :END:
**** header
     #+begin_src sh
       # <alexforsale@yahoo.com>
       # History settings
     #+end_src
**** config
     #+begin_src sh
       HISTFILE=~/.history-zsh
       HISTSIZE=10000
       SAVEHIST=10000
       setopt append_history           # allow multiple sessions to append to one history
       setopt bang_hist                # treat ! special during command expansion
       setopt extended_history         # Write history in :start:elasped;command format
       setopt hist_expire_dups_first   # expire duplicates first when trimming history
       setopt hist_find_no_dups        # When searching history, don't repeat setopt hist_ignore_dups         # ignore duplicate entries of previous events
       setopt hist_ignore_space        # prefix command with a space to skip it's recording
       setopt hist_reduce_blanks       # Remove extra blanks from each command added to history
       setopt hist_verify              # Don't execute immediately upon history expansion
       setopt inc_append_history       # Write to history file immediately, not when shell quits
       setopt share_history            # Share history among all sessions
       setopt histallowclobber         # add `|' to output redirections in the history
     #+end_src
*** 99-others.zsh
    :PROPERTIES:
    :header-args: :tangle ~/.config/zsh/conf.d/99-others.zsh :shebang #!/usr/bin/env zsh
    :END:
**** header
     #+begin_src sh
       # <alexforsale@yahoo.com>
       # other uncategorized zsh settings
     #+end_src
**** config
     #+begin_src sh
       setopt interactive_comments     # allow # comments in shell; good for copy/paste
       unsetopt correct_all            # I don't care for 'suggestions' from ZSH
       export BLOCK_SIZE="'1"          # Add commas to file sizes

       # automatically remove duplicates from these arrays
       typeset -U path cdpath fpath manpath

       # warning if file exists ('cat /dev/null > ~/.zshrc')
       setopt nocheckjobs

       MAILCHECK=300
     #+end_src
