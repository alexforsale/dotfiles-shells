#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:{} arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil f:t inline:t num:nil p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: Common Shell initialization files
#+date: <2024-03-12 Tue>
#+author: Kristian Alexander P
#+email: alexforsale@yahoo.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 29.2 (Org mode 9.6.15)
#+cite_export:
#+startup: indent fold
#+export_file_name: index.html
#+setupfile: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+HTML_HEAD: <style> #content{max-width:1800px;}</style>
#+HTML_HEAD: <style> p{max-width:800px;}</style>
#+HTML_HEAD: <style> li{max-width:800px;}</style>

This repository is a collection of common POSIX-compliant shells configuration files that I used.
* .shrc
:PROPERTIES:
:header-args: :tangle .shrc :shebang #!/bin/sh
:END:

Taken from /FreeBSD/. This file will be used if the shell is invoked for interactive use and the environment variable ENV is set to this file.
#+begin_src sh -n
  # $FreeBSD$
  #
  # .shrc - bourne shell startup file
  #
  # This file will be used if the shell is invoked for interactive use and
  # the environment variable ENV is set to this file.
  #
  # see also sh(1), environ(7).
  #

  # file permissions: rwxr-xr-x
  #
  # umask	022

  # Uncomment this to enable the builtin vi(1) command line editor in sh(1),
  # e.g. ESC to go into visual mode.
  # set -o vi

  if ([ "${SHELL}" != "/bin/sh" ] && [ "${SHELL}" != "/bin/dash" ]);then
     return
  fi

  alias h='fc -l'
  alias j=jobs
  alias m="$PAGER"
  alias ll='ls -laFo'
  alias l='ls -l'
  alias g='egrep -i'

  # # be paranoid
  # alias cp='cp -ip'
  # alias mv='mv -i'
  # alias rm='rm -i'

  # set prompt: ``username@hostname:directory $ ''
  if [ "${DISTRO}" = "freebsd" ]; then
      PS1="\u@\h:\w \\$ "
  else
      PS1="${USER}@${HOSTNAME}:\${PWD} $ "
  fi

  # search path for cd(1)
  # CDPATH=:$HOME
#+end_src
This file itself will only be called from the system / user profile (=/etc/profile= or =~/.profile=).
* .login
:PROPERTIES:
:header-args: :tangle .login :shebang #!/usr/bin/env tcsh
:END:

Used by =csh= and =tcsh=. Read after =.cshrc= at login.
#+begin_src sh -n
  # -*- mode: sh -*-
  # $FreeBSD$
  #
  # .login - csh login script, read by login shell, after `.cshrc' at login.
  #
  # See also csh(1), environ(7).
  #

  # Query terminal size; useful for serial lines.
  if ( -x /usr/bin/resizewin ) /usr/bin/resizewin -z
#+end_src

* .logout
:PROPERTIES:
:header-args: :tangle .logout :shebang #!/usr/bin/env tcsh
:END:

#+begin_src sh -n
  # -*- mode: sh -*-
  #
  # .logout - csh logout script
  #

  if ( -x `which clear` ) clear
#+end_src

* .profile
:PROPERTIES:
:header-args: :tangle .profile :shebang #!/bin/sh
:END:

Used by various shells. It is important to keep this script POSIX-compliant since there's more than one shell depends on it.
#+begin_src sh -n
  # ~/.profile
  # Environment and startup programs.
  # source /etc/profile if exist.
  # <alexforsale@yahoo.com>
  #

  [ -f /etc/profile ] && . /etc/profile

  # this goes first in case others needs it.
  if [ -d "${HOME}/bin" ] ; then
      export PATH="${HOME}/bin:${PATH}"
  fi
  if [ -d "$HOME/.local/bin" ];then
     export PATH="${HOME}/.local/bin:${PATH}"
  fi

  # Loads user profiles if exists. Should be in ~/.profile.d
  # but let's not pollute ~ anymore.

  if [ -d "${HOME}/.config/profile.d" ]; then
      for profile in "${HOME}"/.config/profile.d/*.sh; do
          . "${profile}"
      done
      unset profile
  fi

  if [ -n "${PATH}" ]; then
      old_PATH=${PATH}:; PATH=
      while [ -n "${old_PATH}" ]; do
          x=${old_PATH%%:*}       # the first remaining entry
          case ${PATH}: in
              ,*:"$x":*) ;;         # already there
              ,*) PATH=${PATH}:$x;;    # not there yet
          esac
          old_PATH=${old_PATH#*:}
      done
      PATH=${PATH#:}
      unset old_PATH x
  fi

  # local ~/.profile
  if [ -r "${HOME}"/.config/profile.local ];then
     . "${HOME}"/.config/profile.local
     elif [ -r "${HOME}"/.profile.local ];then
          . "${HOME}"/.profile.local
     fi

  # if running bash
  if [ -n "${BASH_VERSION}" ]; then
      # include .bashrc if it exists
      if [ -f "${HOME}/.bashrc" ]; then
          . "${HOME}/.bashrc"
      fi
  fi
#+end_src

** Modules

Their file names are prefixed with numbers =dd-filename= to ensure the order.
*** distro
:PROPERTIES:
:header-args: :tangle .config/profile.d/00-distro.sh :mkdirp t :shebang #!/bin/sh
:END:

This is an easier way for my shell scripts to query the currently running *nix distribution and their version.
#+begin_src sh
  # ~/.config/profile.d/00-distro.sh
  # set distro environment
  # <alexforsale@yahoo.com>

  # set DISTRO and DISTROVER
  if [ -f /etc/os-release ]; then
      # freedesktop.org and systemd
      . /etc/os-release
      DISTRO="${ID}"
      DISTROVER="${VERSION_ID}"
      [ -z "${DISTROVER}" ] &&
          DISTROVER="${BUILD_ID}"
  elif [ "$(command -v lsb_release >/dev/null)" ]; then
      # linuxbase.org
      DISTRO="$(lsb_release -si | awk '{print tolower ($0)}')"
      DISTROVER="$(lsb_release -sr | awk '{print tolower ($0)}')"
  elif [ -f /etc/lsb-release ]; then
      # For some versions of Debian/Ubuntu without lsb_release command
      . /etc/lsb-release
      DISTRO="${DISTRIB_ID}"
      DISTROVER="${DISTRIB_RELEASE}"
  elif [ -f /etc/debian_version ]; then
      # Older Debian/Ubuntu/etc.
      DISTRO=Debian
      DISTROVER="$(cat /etc/debian_version)"
  else
      # Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
      DISTRO="$(uname -s)"
      DISTROVER="$(uname -r)"
  fi

  # set helper functions here for now
  contains() { case "$1" in *"$2"*) true ;; *) false ;; esac }

  export DISTRO DISTROVER
#+end_src
The =contains()= function is for a quick string search.

*** locale
:PROPERTIES:
:header-args: :tangle .config/profile.d/00-locale.sh :mkdirp t :shebang #!/bin/sh
:END:

This is rarely used, most of the times the the system shell startup files already defined these variables.
#+begin_src sh -n
  # ~/.config/profile.d/00-locale.sh
  # locale settings
  # <alexforsale@yahoo.com>

  # language
  [ -z "${LANG}" ] && export LANG=en_US.UTF-8
  [ -z "${MM_CHARSET}" ] && export MM_CHARSET=en_US.UTF-8
#+end_src

*** xdg-base-directory
:PROPERTIES:
:header-args: :tangle .config/profile.d/01-xdg_base_directory.sh :mkdirp t :shebang #!/bin/sh
:END:

Ensure the running session comply to the XDG Base Directory specification. Variable declaration should be guarded in case the running system already declares it.
#+begin_src sh -n
  # ~/.config/profile.d/01-xdg_base_directory.sh
  # XDG Base Directory specification
  # https://wiki.archlinux.org/index.php/XDG_BASE_Directory_support
  # <alexforsale@yahoo.com>

  if [ -z "${XDG_CONFIG_HOME}" ]; then
    if [ -d "${HOME}/.config" ]; then
      mkdir -p "${HOME}/.config"
    fi
  fi

  [ -z "${XDG_CONFIG_HOME}" ] && XDG_CONFIG_HOME="${HOME}/.config"

  if [ -z "${XDG_CACHE_HOME}" ]; then
    if [ -d "${HOME}/.cache" ]; then
      mkdir -p "${HOME}/.cache"
    fi
  fi

  [ -z "${XDG_CACHE_HOME}" ] && XDG_CACHE_HOME="${HOME}/.cache"

  if [ -z "${XDG_DATA_HOME}" ]; then
    if [ -d "${HOME}/.local/share" ]; then
      mkdir -p "${HOME}/.local/share"
    fi
  fi

  [ -z "${XDG_DATA_HOME}" ] && XDG_DATA_HOME="${HOME}/.local/share"

  if [ -z "${XDG_RUNTIME_DIR}" ]; then
    case "${DISTRO}" in
      "gentoo")
        XDG_RUNTIME_DIR="/tmp/$(id -u)-runtime-dir"
        if [ ! -d "${XDG_RUNTIME_DIR}" ];then
          mkdir -p "${XDG_RUNTIME_DIR}"
          chmod 0700 "${XDG_RUNTIME_DIR}"
        fi
        ;;
      "arch")
        XDG_RUNTIME_DIR="/run/user/$(id -u)"
        if [ ! -d "${XDG_RUNTIME_DIR}" ];then
          mkdir -p "${XDG_RUNTIME_DIR}"
          chmod 0700 "${XDG_RUNTIME_DIR}"
        fi
        ;;
      "freebsd")
        XDG_RUNTIME_DIR="/tmp/$(id -u)-runtime-dir"
        if [ ! -d "${XDG_RUNTIME_DIR}" ];then
          mkdir -p "${XDG_RUNTIME_DIR}"
          chmod 0700 "${XDG_RUNTIME_DIR}"
        fi
        ;;
    esac
  fi

  if [ -z "$DBUS_SESSION_BUS_ADDRESS" ]; then
    # differs per distro
    #DBUS_SESSION_BUS_ADDRESS="unix:path=${XDG_RUNTIME_DIR}/bus"
    `command -v dbus-launch` && eval `dbus-launch --sh-syntax`
  fi

  # XDG User Directories
  # https://wiki.archlinux.org/index.php/XDG_user_directories
  [ -z "${XDG_DESKTOP_DIR}" ] && export XDG_DESKTOP_DIR="${HOME}/Desktop"
  [ -z "${XDG_DOWNLOAD_DIR}" ] && export XDG_DOWNLOAD_DIR="${HOME}/Downloads"
  [ -z "${XDG_TEMPLATES_DIR}" ] && export XDG_TEMPLATES_DIR="${HOME}/Templates"
  [ -z "${XDG_PUBLICSHARE_DIR}" ] && export XDG_PUBLICSHARE_DIR="${HOME}/Public"
  [ -z "${XDG_DOCUMENTS_DIR}" ] && export XDG_DOCUMENTS_DIR="${HOME}/Documents"
  [ -z "${XDG_MUSIC_DIR}" ] && export XDG_MUSIC_DIR="${HOME}/Music"
  [ -z "${XDG_PICTURES_DIR}" ] && export XDG_PICTURES_DIR="${HOME}/Pictures"
  [ -z "${XDG_VIDEOS_DIR}" ] && export XDG_VIDEOS_DIR="${HOME}/Videos"

  for dir in "${XDG_DESKTOP_DIR}" "${XDG_DOWNLOAD_DIR}" "${XDG_TEMPLATES_DIR}" \
    "${XDG_PUBLICSHARE_DIR}" "${XDG_DOCUMENTS_DIR}" "${XDG_MUSIC_DIR}" \
    "${XDG_PICTURES_DIR}" "${XDG_VIDEOS_DIR}";do
    if [ ! -d "${dir}" ] || [ ! -L "${dir}" ];then
      mkdir -p "${dir}" 2>/dev/null
    fi
  done
  unset dir

  if [ -d /usr/share ]; then
      contains "${XDG_DATA_DIRS}" "/usr/share" ||
          export XDG_DATA_DIRS="/usr/share"
  fi

  if [ -d /usr/local/share ]; then
      contains "${XDG_DATA_DIRS}" "/usr/local/share" ||
          export XDG_DATA_DIRS="${XDG_DATA_DIRS}:/usr/local/share"
  fi

  if [ -d /var/lib/flatpak/exports/share ]; then
      contains "${XDG_DATA_DIRS}" "/var/lib/flatpak/exports/share" ||
          export XDG_DATA_DIRS="/var/lib/flatpak/exports/share"
  fi

  if [ -d ~/.local/share/flatpak/exports/share ]; then
      contains "${XDG_DATA_DIRS}" "~/.local/share/flatpak/exports/share" ||
          export XDG_DATA_DIRS="~/.local/share/flatpak/exports/share"
  fi

  export XDG_CONFIG_HOME XDG_CACHE_HOME XDG_DATA_HOME XDG_RUNTIME_DIR DBUS_SESSION_BUS_ADDRESS
#+end_src

*** editors
:PROPERTIES:
:header-args: :tangle .config/profile.d/02-editors.sh :mkdirp t :shebang #!/bin/sh
:END:

- $EDITOR :: Application set as this variable should be able to operate without the "advanced" terminal functionalities. Most of the times, =vi= is the default $EDITOR
- $VISUAL :: for fullscreen editors.
#+begin_src sh -n
  # ~/.config/profile.d/02-editors.sh
  # ${EDITOR}, ${VISUAL} and ${ALTERNATE_EDITOR}
  # <alexforsale@yahoo.com>

  # chemacs-profile
  if [ -e "${HOME}/.config/chemacs/profile" ]; then
      export CHEMACS_PROFILE="$(cat ${HOME}/.config/chemacs/profile)"
  elif [ -e "${HOME}/.emacs-profile" ]; then
      export CHEMACS_PROFILE="$(cat ${HOME}/.emacs-profile)"
  fi

  [ -n "${CHEMACS_PROFILE}" ] && emacs_args="-s ${CHEMACS_PROFILE}"

  # see https://unix.stackexchange.com/questions/4859/visual-vs-editor-what-s-the-difference
  if [ "$(command -v emacs)" ]; then
      export VISUAL="${VISUAL:-emacsclient -c} ${emacs_args}"
      export EDITOR="${EDITOR:-emacsclient -t} ${emacs_args}"
      export ALTERNATE_EDITOR=${VISUAL}
  elif [ "$(command -v gvim)" ]; then # in case it's available, I don't use much of this
      export EDITOR="${EDITOR:-vim}"  # this should also installed
      export VISUAL="${VISUAL:-gvim}"
  elif [ "$(command -v vim)" ]; then # most distro provide this (linux that is)
      export EDITOR="${EDITOR:-vim}"
      export VISUAL="${VISUAL:-vim}"
  else
      [ $(command -v nvim) ] &&
          export EDITOR="${EDITOR:-nvim}"

      [ $(command -v leafpad) ] &&
          export EDITOR="${EDITOR:-leafpad}"

      [ $(command -v l3afpad) ] &&
          export EDITOR="${EDITOR:-l3afpad}"

      [ $(command -v kate) ] &&
          export EDITOR="${EDITOR:-kate}"

      [ $(command -v pluma) ] &&
          export EDITOR="${EDITOR:-pluma}"

      [ $(command -v kwrite) ] &&
          export EDITOR="${EDITOR:-kwrite}"

      [ $(command -v scribe) ] &&
          export EDITOR="${EDITOR:-scribe}"

      [ $(command -v geany) ] &&
          export EDITOR="${EDITOR:-geany}"

      [ $(command -v gedit) ] &&
          export EDITOR="${EDITOR:-gedit}"

      [ $(command -v code) ] &&
          export EDITOR="${EDITOR:-code}"

      # most unix os provide this,
      [ $(command -v vi) ] &&
          export EDITOR="${EDITOR:-vi}"

      export VISUAL=${EDITOR}
      export ALTERNATE_EDITOR=${EDITOR}
  fi

  # if [ "%(command -v nvim)" ]; then
  #     export GVIMINIT='let $MYGVIMRC = !has("nvim") ? "$XDG_CONFIG_HOME/vim/gvimrc" : "$XDG_CONFIG_HOME/nvim/init.gvim" | so $MYGVIMRC'
  #     export VIMINIT='let $MYVIMRC = !has("nvim") ? "$XDG_CONFIG_HOME/vim/vimrc" : "$XDG_CONFIG_HOME/nvim/init.vim" | so $MYVIMRC'
  # elif [ "$(command -v vim)" ]; then
  #     export GVIMINIT='let $MYGVIMRC="$XDG_CONFIG_HOME/vim/gvimrc" | source $MYGVIMRC'
  #     export VIMINIT='let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc" | source $MYVIMRC'
  # fi
#+end_src

- $CHEMACS_PROFILE :: This variable is used as a tweak to have multiple Emacs configurations[fn:1].
- VIM / GVIM / NVIM :: I used to set the VIMRC variable to =~/.config= directory. Commented since I rarely used them, their defaults is good enough fo a quick editing.
*** terminals
:PROPERTIES:
:header-args: :tangle .config/profile.d/03-terminals.sh :mkdirp t :shebang #!/bin/sh
:END:

The =$TERMINAL= variable is not used in any shell init files (that I know of). But handy when using a tiling window manager.
#+begin_src sh -n
# ~/.config/profile.d/03-terminal.sh
# ${TERMINAL} apps
# <alexforsale@yahoo.com>

# Terminal apps
if [ "$(command -v alacritty)" ]; then
    export TERMINAL=${TERMINAL:-alacritty}
elif [ "$(command -v gnome-terminal)" ]; then
    export TERMINAL=${TERMINAL:-gnome-terminal}
elif [ "$(command -v terminator)" ]; then
    export TERMINAL=${TERMINAL:-terminator}
elif [ "$(command -v tilda)" ]; then
    export TERMINAL=${TERMINAL:-tilda}
elif [ "$(command -v guake)" ]; then
    export TERMINAL=${TERMINAL:-guake}
elif [ "$(command -v konsole)" ]; then
    export TERMINAL=${TERMINAL:-konsole}
elif [ "$(command -v lxterminal)" ]; then
    export TERMINAL=${TERMINAL:-lxterminal}
elif [ "$(command -v yakuake)" ]; then
    export TERMINAL=${TERMINAL:-yakuake}
elif [ "$(command -v st)" ]; then
    export TERMINAL=${TERMINAL:-st}
elif [ "$(command -v terminology)" ]; then
    export TERMINAL=${TERMINAL:-terminology}
elif [ "$(command -v xfce4-terminal)" ]; then
    export TERMINAL=${TERMINAL:-xfce4-terminal}
elif [ "$(command -v lilyterm)" ]; then
    export TERMINAL=${TERMINAL:-lilyterm}
elif [ "$(command -v alacritty)" ]; then
    export TERMINAL=${TERMINAL:-alacritty}
elif [ "$(command -v xterm)" ]; then
    export TERMINAL=${TERMINAL:-xterm}
elif [ "$(command -v urxvt)" ]; then
    export TERMINAL=${TERMINAL:-urxvt}
fi
#+end_src

*** security
:PROPERTIES:
:header-args: :tangle .config/profile.d/04-security.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/04-security.sh
  # various security apps
  # <alexforsale@yahoo.com>

  # from https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html
  export GPG_TTY="$(tty)"

  # https://wiki.gentoo.org/wiki/GnuPG#Automatically_starting_the_GPG_agent
  if [ -n "$SSH_CONNECTION" ]; then
      export PINENTRY_USER_DATA="USE_CURSES=1"
  fi

  # gpg-agent
  case "${DISTRO}" in
      freebsd)
          for i in curses gnome3 gtk2 qt5; do
              if [ "$(command -v pinentry-${i})" ]; then
                  _PINENTRY="$(command -v pinentry-${i})"
              else
                  _PINENTRY="$(command -v pinentry)"
              fi
          done

          if [ ! "$(pgrep -u "${USER}" -x gpg-agent)" ]; then
              /usr/local/bin/gpg-agent --enable-ssh-support \
                  --pinentry-program "${_PINENTRY}" \
                  --daemon "$@"
              if [ -f "${HOME}/.gpg-agent-info" ]; then
                  . "${HOME}/.gpg-agent-info"
                  export GPG_AGENT_INFO SSH_AUTH_SOCK
              fi
          fi
          ;;
      ,*)
          # append pinentry-program since its location varied for each distro
          [ -z "$(pgrep -u ${USER} -x gpg-agent)" ] &&
              gpg-agent --pinentry-program "$(command -v pinentry)" >/dev/null 2>&1
          ;;
  esac

  unset SSH_AGENT_PID
  if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
      export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
  fi

  # keychain
  # https://wiki.gentoo.org/wiki/Keychain
  if [ "$(command -v keychain)" ]; then
      [ -z "${HOSTNAME}" ] && HOSTNAME="$(uname -n)"
      keychain --quiet --agents "gpg,ssh"
      [ -f "${HOME}/.keychain/${HOSTNAME}-sh" ] &&
          . "${HOME}/.keychain/${HOSTNAME}-sh"
      [ -f "${HOME}/.keychain/${HOSTNAME}-sh-gpg" ] &&
          . "${HOME}/.keychain/${HOSTNAME}-sh-gpg"
  fi
#+end_src

*** file managers
:PROPERTIES:
:header-args: :tangle .config/profile.d/05-filemanagers.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh
  # ~/.config/profile.d/05-filemanagers.sh
  # filemanager configuration
  # <alexforsale@yahoo.com>

  # file manager
  if [ "$(command -v emacs)" ]; then
      export FILE=${FILE:-emacsclient -c -e '(dired-jump)'}
  elif [ "$(command -v ranger)" ]; then
      export FILE=${FILE:-ranger}
  elif [ "$(command -v pcmanfm)" ]; then
      export FILE=${FILE:-pcmanfm}
  elif [ "$(command -v thunar)" ]; then
      export FILE=${FILE:-thunar}
  elif [ "$(command -v caja)" ]; then
      export FILE=${FILE:-caja}
  elif [ "$(command -v nautilus)" ]; then
      export FILE=${FILE:-nautilus}
  elif [ "$(command -v nemo)" ]; then
      export FILE=${FILE:-nemo}
  elif [ "$(command -v dolphin)" ]; then
      export FILE=${FILE:-dolpin}
  elif [ "$(command -v rox)" ]; then
      export FILE=${FILE:-rox}
  fi
#+end_src
Most system I used will default to Emacs's =dired=, if you use Emacs you should know dired.

*** browser
:PROPERTIES:
:header-args: :tangle .config/profile.d/06-browser.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/06-browser.sh
  # ${BROWSER} configuration
  # <alexforsale@yahoo.com>

  # Browser
  if [ "$(command -v firefox)" ]; then
      export BROWSER=${BROWSER:-firefox}
  elif [ "$(command -v google-chrome-stable)" ]; then
      export BROWSER=${BROWSER:-google-chrome-stable}
  elif [ "$(command -v brave)" ]; then
      export BROWSER=${BROWSER:-brave}
  elif [ "$(command -v midori)" ]; then
      export BROWSER=${BROWSER:-midori}
  elif [ "$(command -v qutebrowser)" ]; then
      export BROWSER=${BROWSER:-qutebrowser}
  elif [ "$(command -v chromium)" ]; then
      export BROWSER=${BROWSER:-chromium}
  elif [ "$(command -v seamonkey)" ]; then
      export BROWSER=${BROWSER:-seamonkey}
  elif [ "$(command -v falkon)" ]; then
      export BROWSER=${BROWSER:-falkon}
  else
      [ "$(command -v elinks)" ] &&
          export BROWSER=${BROWSER:-elinks}

      [ "$(command -v lynx)" ] &&
          export BROWSER=${BROWSER:-lynx}

      [ "$(command -v w3m)" ] &&
          export BROWSER=${BROWSER:-w3m}

      [ "$(command -v links)" ] &&
          export BROWSER="${BROWSER:-links -g}"
  fi
#+end_src
I use more than one browsers, with firefox being my default browser.

*** mail apps
:PROPERTIES:
:header-args: :tangle .config/profile.d/07-mail_apps.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/07-mail_apps.sh
  # ${MAIL_APP} configuration
  # <alexforsale@yahoo.com>

  if [ "$(command -v thunderbird)" ]; then
      export MAIL_APP=${MAIL_APP:-thunderbird}
  elif [ "$(command -v alpine)" ]; then
      export MAIL_APP=${MAIL_APP:-alpine}
  elif [ "$(command -v balsa)" ]; then
      export MAIL_APP=${MAIL_APP:-balsa}
  elif [ "$(command -v evolution)" ]; then
      export MAIL_APP=${MAIL_APP:-evolution}
  elif [ "$(command -v geary)" ]; then
      export MAIL_APP=${MAIL_APP:-geary}
  elif [ "$(command -v kmail)" ]; then
      export MAIL_APP=${MAIL_APP:-kmail}
  elif [ "$(command -v kube)" ]; then
      export MAIL_APP=${MAIL_APP:-kube}
  elif [ "$(command -v mailspring)" ]; then
      export MAIL_APP=${MAIL_APP:-mailspring}
  fi
#+end_src

Thunderbird never disapoint, so why bother?
*** themes
:PROPERTIES:
:header-args: :tangle .config/profile.d/10-themes.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
    # ~/.config/profile.d/10-themes.sh
    # themes configuration
    # <alexforsale@yahoo.com>

    # wal
    #if [ "$(command -v wal)" ] && [ -z "${SSH_CLIENT}" ]; then
    #    wal -R
    #fi

    if [ -n "${DESKTOP_SESSION}" ]; then
        case ${XDG_CURRENT_DESKTOP} in
            "KDE")
                if [ -n "${xrdb_args}" ]; then
                    $(command -v xrdb) -merge "${xrdb_args}" "${HOME}"/.Xresources >/dev/null 2>&1
                fi
                ;;
        esac
    fi

  [ -z "${GTK_THEME}" ] && export GTK_THEME=${GTK_THEME:Breeze-Dark}
#+end_src

I'm considering moving this into xorg configuration file, or to the display manager configuration.
*** cargo
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-cargo.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh
  # ~/.config/profile.d/99-cargo.sh
  # cargo configuration
  # https://wiki.archlinux.org/index.php/Rust#Cargo
  # <alexforsale@yahoo.com>

  if [ -d "$HOME/.cargo/bin" ];then
     export PATH=$HOME/.cargo/bin:$PATH
  fi
#+end_src
For when I'm playful and messing around with rust.
*** ccache
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-ccache.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/99-ccache.sh
  # ccache configuration
  # <alexforsale@yahoo.com>

  if [ "$(command -v ccache)" ] &&
         [ -d "/usr/lib/ccache/bin" ]; then
      if [ "${SHELL}" != "/bin/sh" ] &&
             [ "$(command -v pathprepend)" ]; then
          pathprepend /usr/lib/ccache/bin
      else
          export PATH=/usr/lib/ccache/bin:"${PATH}"
      fi
  fi

  case "${DISTRO}" in
      "gentoo")
          [ -r /var/cache/ccache ] &&
              export CCACHE_DIR="/var/cache/ccache"
          ;;
  esac
#+end_src
When turning on the monitor means compiling.

*** composer
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-composer.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/99-composer.sh
  # composer path configuration
  # <alexforsale@yahoo.com>

  if [ "$(command -v composer)" ] &&
     [ -d "${HOME}/.config/composer/vendor/bin" ]; then
     export PATH="${HOME}/.config/composer/vendor/bin:${PATH}"
  fi
#+end_src
I used composer once, but obligated to have this config.

*** dash
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-dash.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/99-dash.sh
  # configuration for dash shells and other sh equivalent
  # <alexforsale@yahoo.com>

  if ([ "${SHELL}" = "/bin/sh" ] || [ "${SHELL}" = "/bin/dash" ]);then
     ENV=${HOME}/.shrc; export ENV
     [ -x /usr/bin/resizewin ] && /usr/bin/resizewin -z
  fi
#+end_src
This ensures the =~/.shrc~= file get sourced if exists.

*** doom emacs
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-doom_emacs.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/99-doom_emacs.sh
  # doom emacs path
  # <alexforsale@yahoo.com>

  if [ "$(command -v emacs)" ] &&
      [ -e "${HOME}"/.emacs.d/bin/doom ]; then
      [ ! "$(command -v doom)" ] &&
          export PATH="${PATH}:${HOME}/.emacs.d/bin"
  elif [ -e "${HOME}/.config/doom/bin/doom" ]; then
      [ ! "$(command -v doom)" ] &&
          export PATH="${PATH}/.config/doom/bin"
  fi
#+end_src
Doom Emacs have its own scripts.
*** elinks
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-elinks.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/99-elinks.sh
  # configuration for elinks
  # <alexforsale@yahoo.com>

  if [ "$(command -v elinks)" ];then
     if [ -d "${XDG_CONFIG_HOME}"/elinks ];then
        if [ -d "${HOME}/.elinks" ]; then
            mv "${HOME}/.elinks" "${XDG_CONFIG_HOME}/elinks"
        else
            mkdir -p "${XDG_CONFIG_HOME}/elinks"
        fi
     fi
        export ELINKS_CONFDIR="${XDG_CONFIG_HOME}/elinks"
  fi
#+end_src
Before you ask: "why bother with elinks?", try gentoo, or worse, linuxfromscratch.
*** emacs vterm
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-emacs_vterm.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/99-emacs-vterm.sh
  # https://github.com/akermu/emacs-libvterm
  # <alexforsale@yahoo.com>

  # dont' source this in sh
  if [ "${SHELL}" = "/bin/sh" ]; then
      return
  fi

  vterm_printf(){
      if [ -n "$TMUX" ]; then
          # Tell tmux to pass the escape sequences through
          # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
          printf "\ePtmux;\e\e]%s\007\e\\" "$1"
      elif [ "${TERM%%-*}" = "screen" ]; then
          # GNU screen (screen, screen-256color, screen-256color-bce)
          printf "\eP\e]%s\007\e\\" "$1"
      else
          printf "\e]%s\e\\" "$1"
      fi
  }

  if [[ "$INSIDE_EMACS" = 'vterm' ]]; then
      function clear(){
          vterm_printf "51;Evterm-clear-scrollback";
          tput clear;
      }
  fi

  vterm_cmd() {
      local vterm_elisp
      vterm_elisp=""
      while [ $# -gt 0 ]; do
          vterm_elisp="$vterm_elisp""$(printf '"%s" ' "$(printf "%s" "$1" | sed -e 's|\\|\\\\|g' -e 's|"|\\"|g')")"
          shift
      done
      vterm_printf "51;E$vterm_elisp"
  }
#+end_src
Perhaps later version of vterm doesn't really need this anymore?

*** freeBSD
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-freebsd.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/99-freebsd.sh
  # configuration for FreeBSD
  # <alexforsale@yahoo.com>

  if [ "${DISTRO}" = "freebsd" ]; then
     [ -z "${ENV}" ] && ENV=${HOME}/.shrc
     export ENV
     export PAGER=less
     [ -x /usr/bin/resizewin ] && /usr/bin/resizewin -z
     [ -x /usr/bin/fortune ] && /usr/bin/fortune freebsd-tips
     # Let sh(1) know it's at home, despite /home being a symlink.
     if [ "$PWD" != "$HOME" ] && [ "$PWD" -ef "$HOME" ]; then cd || return; fi
     cd "${HOME}" || exit
  fi
#+end_src

*** fsharp
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-fsharp.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/99-fsharp.sh
  # configuration for F#
  # <alexforsale@yahoo.com>

  if [[ -d "${HOME}/.dotnet/tools" ]] &&
         [[ $(command -v dotnet) ]]; then
      export PATH="${PATH}:${HOME}/.dotnet/tools"
  fi
#+end_src
Just to make me looks like a programmer.
*** ghcup
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-ghcup.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/99-ghcup.sh
  # haskell's ghcup configuration
  # <alexforsale@yahoo.com>

  [ -f "/home/alexforsale/.ghcup/env" ] && source "/home/alexforsale/.ghcup/env" # ghcup-env

  if [ -d "${HOME}/.ghcup/bin" ]; then
      contains "${PATH}" "${HOME}/.ghcup/bin" ||
          export PATH="${HOME}/.ghcup/bin:${PATH}"
  fi
#+end_src

*** go
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-go.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/99-go.sh
  # $GOPATH configuration
  # <alexforsale@yahoo.com>

  if [ "$(command -v go)" ];then
     # set GOPATH to ~/.local so we don't need
     # to add more PATH
     export GOPATH=${GOPATH:-~/.local}
  fi
#+end_src

*** guix
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-guix.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/99-guix.sh
  # guix configuration
  # <alexforsale@yahoo.com>

  if [ $(command -v guix) ]; then
      if [ -n "${GUIX_LOCPATH}" ];then
         # add /bin and /usr/bin to path
         # to add more PATH
         export PATH=${PATH}:/bin
         export PATH=${PATH}:/usr/bin
         # set the GUIX_BUILD_OPTIONS
         contains "${GUIX_BUILD_OPTIONS}" "-v 3 -c 2 -M 2" ||
             export GUIX_BUILD_OPTIONS="${GUIX_BUILD_OPTIONS} -v 3 -c 2 -M 2"
         if [ -d "${HOME}/.guix-profile/bin" ]; then
             export PATH="${HOME}/.guix-profile/bin:${PATH}"
         fi
         if [ -d "${HOME}/.guix-profile/sbin" ]; then
             export PATH="${HOME}/.guix-profile/sbin:${PATH}"
         fi
      fi

         if [ -d "${HOME}/.guix-profile/share/emacs/site-lisp" ]; then
             contains "${EMACSLOADPATH}" "${HOME}/.guix-profile/share/emacs/site-lisp" ||
                 export EMACSLOADPATH="${HOME}/.guix-profile/share/emacs/site-lisp:${EMACSLOADPATH}"
             contains "${XDG_DATA_DIRS}" "${HOME}/.guix-profile/share" ||
                 export XDG_DATA_DIRS="${HOME}/.guix-profile/share:${XDG_DATA_DIRS}"
         fi
      fi

  export QT_XCB_GL_INTEGRATION=none
#+end_src
Kinda redundant, if I'm using guix, this repository would never be used.
*** Opam
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-opam.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/99-nano.sh
  # <alexforsale@yahoo.com>

  if [ "$(command -v opam)" ]; then
      eval "$(opam env)"
  fi
#+end_src
*** nano
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-nano.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/99-nano.sh
  # see https://nano-editor.org
  # <alexforsale@yahoo.com>

  if [ "$(command -v nano)" ]; then
      if [ ! -d "${XDG_CONFIG_HOME}/nano" ]; then
          mkdir -p "${XDG_CONFIG_HOME}/nano"
          if [ -f "${HOME}/.nanorc" ]; then
              mv "${HOME}/.nanorc" "${XDG_CONFIG_HOME}/nanorc"
          fi
      else
          if [ -f "${HOME}/.nanorc" ]; then
              mv "${HOME}/.nanorc" "${XDG_HOME_CONFIG}/nanorc.bak"
          fi
      fi
      # backups
      mkdir -p "${XDG_CONFIG_HOME}/nano/backups"
  fi
#+end_src
My first exposure to the command line. Though I don't use nano anymore.
*** nix
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-nix.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/99-nix.sh
  # nix configuration
  # <alexforsale@yahoo.com>

  [ -d "${HOME}/.nix-profile/bin" ] && export PATH=${PATH}:${HOME}/.nix-profile/bin

  if [ -n "${GUIX_LOCPATH}" ]; then
      # source profile.d
      [ -e /run/current-system/profile/etc/profile.d/nix.sh ] && . /run/current-system/profile/etc/profile.d/nix.sh
      [ -e /run/current-system/profile/etc/profile.d/nix-daemon.sh ] && . /run/current-system/profile/etc/profile.d/nix-daemon.sh
      if [ -d "${HOME}/.nix-profile/share/icons" ]; then
          contains "${XCURSOR_PATH}" "${HOME}/.nix-profile/share/icons" ||
              export XCURSOR_PATH="${XCURSOR_PATH}:${HOME}/.nix-profile/share/icons"
      fi
      if [ -d "${HOME}/.nix-profile/share" ]; then
          contains "${XDG_DATA_DIRS}" "${HOME}/.nix-profile/share" ||
              export XDG_DATA_DIRS="${HOME}/.nix-profile/share:${XDG_DATA_DIRS}"
      fi
  fi
#+end_src
Hipsters use /nix/.
*** npm
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-npm.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/99-npm.sh
  # node packaged module configuration
  # see https://wiki.archlinux.org/index.php/Node.js
  # <alexforsale@yahoo.com>

  if [ -d "${HOME}/.config/nvm" ]; then
      export NVM_DIR="${HOME}/.config/nvm"
      [ -s "${NVM_DIR}/nvm.sh" ] && \. "${NVM_DIR}/nvm.sh"  # This loads nvm
      [ -n "${BASH}" ] &&
          [ -s "${NVM_DIR}/bash_completion" ] && \. "${NVM_DIR}/bash_completion"  # This loads nvm bash_completion
      if [ -n "${npm_config_prefix}" ]; then
          unset npm_config_prefix
      fi
  elif [ "$(command -v npm)" ] && [ ! "$(command -v nvm)" ]; then
     export npm_config_prefix="${HOME}/.local"
  fi
#+end_src

*** password-store
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-password-store.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/99-password-store.sh
  # configuration for pass
  # <alexforsale@yahoo.com>

  if [ -f /run/current-system/profile/lib/password-store/extensions/otp.bash ]; then
      [ ! -L "${HOME}/.password-store/.extensions/otp.bash" ] &&
          ln -s /run/current-system/profile/lib/password-store/extensions/otp.bash \
              "${HOME}/.password-store/.extensions/"
      export PASSWORD_STORE_ENABLE_EXTENSIONS=true
  fi
#+end_src
This app should have more love!
*** perl
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-perl.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/99-perl.sh
  # configuration for perl
  # <alexforsale@yahoo.com>

  [ ! -d "${HOME}/.local/perl5/bin" ] &&
      mkdir -p "${HOME}/.local/perl5/bin"
  [ ! -d "${HOME}/.local/perl5/lib/perl5" ] &&
      mkdir -p "${HOME}/.local/perl5/lib/perl5"

  PATH="${HOME}/.local/perl5/bin${PATH:+:${PATH}}"
  PERL5LIB="${HOME}/.local/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"
  PERL_LOCAL_LIB_ROOT="${HOME}/.local/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"
  PERL_MB_OPT="--install_base \"${HOME}/.local/perl5\""
  PERL_MM_OPT="INSTALL_BASE=${HOME}/.local/perl5"

  export PATH PERL5LIB PERL_LOCAL_LIB_ROOT PERL_MB_OPT PERL_MM_OPT
#+end_src

*** python
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-python.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/99-python.sh
  # Python configuration
  # <alexforsale@yahoo.com>

  if [ $(command -v pipenv) ]; then
      [ -z "${PIPENV_VENV_IN_PROJECT}" ] &&
          export PIPENV_VENV_IN_PROJECT=1
  fi

  # pyenv
  if [ $(command -v pyenv) ]; then
      eval "$(pyenv init -)"
  fi
#+end_src

*** ruby
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-ruby.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh -n
  # ~/.config/profile.d/99-ruby.sh
  # ruby configuration
  # <alexforsale@yahoo.com>

  if [ "$(command -v ruby)" ] &&
         [ -d "$(ruby -e 'print Gem.user_dir')/bin" ];then
     PATH="$(ruby -e 'print Gem.user_dir')/bin:$PATH"
     export GEM_HOME="$(ruby -e 'puts Gem.user_dir')"
  fi

  export PATH
#+end_src

*** screen
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-screen.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh
  # ~/.config/profile.d/99-screen.sh
  # configuration for GNU Screen
  # <alexforsale@yahoo.com>

  if [ "$(command -v screen)" ] &&
         [ ! -d "${XDG_CONFIG_HOME}/screen" ]; then
      if [ -d "${HOME}/.screen" ]; then
          mv "${HOME}/.screen" "${XDG_CONFIG_HOME}/screen"
      else
          mkdir -p "${XDG_CONFIG_HOME}/screen"
      fi
  fi
  export SCREENDIR="${XDG_CONFIG_HOME}/screen"
  chmod 700 "${SCREENDIR}"
  export SCREENRC="${SCREENDIR}/config"
#+end_src
Better than /tmux/. That statement just to annoy tmux users.
*** [[https://virtualenvwrapper.readthedocs.io/en/latest/][virtualenvwrapper]]
:PROPERTIES:
:header-args: :tangle .config/profile.d/99-virtualenvwrapper.sh :mkdirp t :shebang #!/bin/sh
:END:

#+begin_src sh
  # ~/.config/profile.d/99-virtualenvwrapper.sh
  # configuration for virtualenvwrapper
  # <alexforsale@yahoo.com>

  if [ -d "${HOME}/.virtualenvs" ]; then
      export WORKON_HOME="${HOME}/.virtualenvs"
  fi

  if [ -x /usr/bin/virtualenvwrapper.sh ]; then
      . /usr/bin/virtualenvwrapper.sh
  fi
#+end_src
* Footnotes

[fn:1] https://github.com/plexus/chemacs2
